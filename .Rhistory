y = PDXcells_P180129T1LVp1m2826_DMEMF12_S4_eaton131))+
#ylim(0, 1e4)+
geom_point()+
geom_smooth(method=lm)+
stat_cor(method = "pearson")
ggplot(count, aes(x = PDXcells_P110616T1p1m3931_tcp13_frm_frozen_S7_eaton131,
y = 	P130411_Cells_S1_eaton02))+
#ylim(0, 1e4)+
geom_point()+
geom_smooth(method=lm)+
stat_cor(method = "pearson")
SubRep <- exSub %>% select(1, 10, 11)
View(SubRep)
View(SubRep)
coldata2 <- data.frame(
Line = factor(allPDXclassical[[1]], allPDXclassical[[5]], allPDXclassical[[5]])
)
coldata2 <- cbind(colnames(SubRep), coldata2)
names(coldata)[1] <- "filename"
coldata2 <- data.frame(
Line = factor(allPDXclassical[[1]], allPDXclassical[[5]], allPDXclassical[[5]])
)
coldata2 <- data.frame(
Line = factor(allPDXclassical[[1]], allPDXclassical[[4]], allPDXclassical[[5]])
)
coldata2 <- data.frame(
Line = factor(allPDXclassical[[1]], allPDXclassical[[4]], allPDXclassical[[5]])
)
coldata2 <- cbind(colnames(SubRep), coldata2)
names(coldata2)[1] <- "filename"
coldata2 <- data.frame(
Line = factor(c(allPDXclassical[[1]], allPDXclassical[[4]], allPDXclassical[[5]]))
)
coldata2 <- cbind(colnames(SubRep), coldata2)
names(coldata2)[1] <- "filename"
ddsFullCountTable <- DESeqDataSetFromMatrix(
countData = SubRep,
colData = coldata2,
design = ~ 1 )
dds <- ddsFullCountTable
#run the DESeq pipeline
dds <- DESeq(dds)
count <- as.data.frame(counts(dds, normalized = T))
ggplot(count, aes(x = PDXcells_P110616T1p1m3931_tcp13_frm_frozen_S7_eaton131,
y = PDXcells_P180129T1LVp1m2826_DMEMF12_S4_eaton131))+
#ylim(0, 1e4)+
geom_point()+
geom_smooth(method=lm)+
stat_cor(method = "pearson")
ggplot(count, aes(x = PDXcells_P110616T1p1m3931_tcp13_frm_frozen_S7_eaton131,
y = 	P130411_Cells_S1_eaton02))+
#ylim(0, 1e4)+
geom_point()+
geom_smooth(method=lm)+
stat_cor(method = "pearson")
ggplot(count, aes(x = PDXcells_P180129T1LVp1m2826_DMEMF12_S4_eaton131,
y = 	P130411_Cells_S1_eaton02))+
#ylim(0, 1e4)+
geom_point()+
geom_smooth(method=lm)+
stat_cor(method = "pearson")
ggplot(count, aes(x = P100422_Cells_S3_eaton02,
y = 	P130411_Cells_S1_eaton02))+
#ylim(0, 1e4)+
geom_point()+
geom_smooth(method=lm)+
stat_cor(method = "pearson")
ggplot(count, aes(x = PDXcells_P110616T1p1m3931_tcp13_frm_frozen_S7_eaton131,
y = 	P130411_Cells_S1_eaton02))+
#ylim(0, 1e4)+
geom_point()+
geom_smooth(method=lm)+
stat_cor(method = "spearman")
ggplot(count, aes(x = PDXcells_P110616T1p1m3931_tcp13_frm_frozen_S7_eaton131,
y = PDXcells_P180129T1LVp1m2826_DMEMF12_S4_eaton131))+
#ylim(0, 1e4)+
geom_point()+
geom_smooth(method=lm)+
stat_cor(method = "spearman")
ggplot(Sub, aes(x = log2(PDXcells_P110616T1p1m3931_tcp13_frm_frozen_S7_eaton131),
y = log2(PDXcells_P180129T1LVp1m2826_DMEMF12_S4_eaton131)))+ #, colour= log(PDXcells_P110616T1p1m3931_tcp13_frm_frozen_S7_eaton131)))+
geom_point()+
geom_smooth(method=lm)+
stat_cor(method = "pearson")
ggplot(count, aes(x = PDXcells_P180129T1LVp1m2826_DMEMF12_S4_eaton131,
y = 	P130411_Cells_S1_eaton02))+
#ylim(0, 1e4)+
geom_point()+
geom_smooth(method=lm)+
stat_cor(method = "pearson")
#scatterplot 	P130411_Cells_S1_eaton02 vs 110616 for comparison
ggplot(count, aes(x = PDXcells_P110616T1p1m3931_tcp13_frm_frozen_S7_eaton131,
y = 	P130411_Cells_S1_eaton02))+
#ylim(0, 1e4)+
geom_point()+
geom_smooth(method=lm)+
stat_cor(method = "pearson")
ggplot(count, aes(x = PDXcells_P110616T1p1m3931_tcp13_frm_frozen_S7_eaton131,
y = PDXcells_P180129T1LVp1m2826_DMEMF12_S4_eaton131))+
#ylim(0, 1e4)+
geom_point()+
geom_smooth(method=lm)+
stat_cor(method = "pearson")
set.seed(seed.use)  # not explicitly needed, but just in case
# load metadata & library keys
data("raw_plates")  # called raw_list in global environment
data("metadata_and_library_key")  # called results in global environment
metadata <- results[[1]]
library_key <- results[[2]]
library_key_2016 <- results[[3]]
sample(1:1000, 1, replace=FALSE)
#candidatePDXlines <- list("P130411T1", "P100422-T1", "P190117T2OM", "P110616-T1", "P180129T1LV")
#BasalLines <- list("PancT6", "P110225-T1", "P911225T2")
CAFlines <- list("P140227T1", "P170216T1", "P170119T1","P140626T1","P140807T1", "P140619T1", "P140711T1")
allPDXlines <- list("P130411T1", "P100422-T1", "P110616-T1", "PancT6", "P110225-T1", "P911225T2")
set.seed(525)
pairs <- matrix(allPDXlines)
pairs <- cbind(pairs, sample(CAFlines, replace = F))
pairs
load("/Volumes/Jen Jen Yeh Lab/RNAseq/RData/Yeh_Salmon.RData")
View(Yeh_Salmon)
View(Yeh_Salmon[["ex"]])
View(Yeh_Salmon[["sampInfo"]])
library(xlsx)
library(data.table)
library(tidyverse)
library(data.table)
library(dplyr)
library(projectR) #PCA, NMF
library(ggplot2)
library(gplots)
library('CoGAPS') #NMF
library(scFeatureFilter)
library(NormExpression)
library(dendextend)
library(SCnorm)
library(edgeR)
library(fastICA)
setwd("~/YehLabHTS")
load("/Volumes/Jen Jen Yeh Lab/RNAseq/RData/Yeh_Salmon.RData")
load("/Volumes/Jen Jen Yeh Lab/RNAseq/RData/Yeh_Salmon_caf_naf_with_fails.RData")
load("/Volumes/Jen Jen Yeh Lab/RNAseq/RData/Yeh_Salmon.RData")
load("/Volumes/Jen Jen Yeh Lab/RNAseq/RData/Yeh_Salmon_caf_naf_with_fails.RData")
sampInfo <- Yeh_Salmon$sampInfo
# P140710N1 was also in the screen but removed from analysis due to
# a cell line mix-up: P140710N1 matches P140227T1 for STR
cellLines <- c("100422", "130411", "140227", "170119")
treatment <- c("untreated", "")
lastFilename <- c()
for (i in 1:(cellLines[[2]])){
# subset Yeh_Salmon samp info by cell line
sampsubset <- sampInfo[grep(cellLines[[2]], sampInfo$filename), ]
# filter by untreated and unmixed samples
sampsubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# file names
filename <- as.character(sampsubset$filename)
# list of the last file names for each candidate line
lastFilename <- c(lastFilename, filename)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(lastFilename))
}
expSub <- cbind(subset(Yeh_Salmon_caf_naf_with_fails[["ex"]], select = Human_P170119T1_CAF_S4_eaton78), expSub)
CreateExpressionMatrix <- function(Metadata) {
filenames <- Metadata$fpkm_file_header
#expression subset
expSubset <- subset(Yeh_Salmon[["ex"]], select = c(filenames))
# open brackets retain the row names (genes)
#ExpSubset[] <- sapply(expSubset[], as.numeric)
}
invitroExpression <- CreateExpressionMatrix(invitroMetadata)
invitroExpression <- data.matrix(invitroExpression, rownames.force = NA)
#invitroExpression[] <- sapply(invitroExpression[], as.numeric)
invivoExpression <- CreateExpressionMatrix(invivoMetadata)
# log transform data
loginvitroExpression <- log(invitroExpression +1)
loginvitroExpression <- log(expSub +1)
plot(loginvitroExpression)
for (i in 1:(cellLines[[i]])){
# subset Yeh_Salmon samp info by cell line
sampsubset <- sampInfo[grep(cellLines[[i]], sampInfo$filename), ]
# filter by untreated and unmixed samples
sampsubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# file names
filename <- as.character(sampsubset$filename)
# list of the last file names for each candidate line
lastFilename <- c(lastFilename, filename)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(lastFilename))
}
lastFilename <- c()
for (i in 1:length(cellLines[[i]])){
# subset Yeh_Salmon samp info by cell line
sampsubset <- sampInfo[grep(cellLines[[i]], sampInfo$filename), ]
# filter by untreated and unmixed samples
sampsubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# file names
filename <- as.character(sampsubset$filename)
# list of the last file names for each candidate line
lastFilename <- c(lastFilename, filename)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(lastFilename))
}
# P140710N1 was also in the screen but removed from analysis due to
# a cell line mix-up: P140710N1 matches P140227T1 for STR
cellLines <- c("100422", "130411", "140227", "170119")
lastFilename <- c()
for (i in 1:length(cellLines[[i]])){
# subset Yeh_Salmon samp info by cell line
sampsubset <- sampInfo[grep(cellLines[[i]], sampInfo$filename), ]
# filter by untreated and unmixed samples
sampsubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# file names
filename <- as.character(sampsubset$filename)
# list of the last file names for each candidate line
lastFilename <- c(lastFilename, filename)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(lastFilename))
}
cellLines[[2]]
cellLines[2]
cellLines[1]
lastFilename <- c()
for (i in 1:length(cellLines[[i]])){
# subset Yeh_Salmon samp info by cell line
sampsubset <- sampInfo[grep(cellLines[[i]], sampInfo$filename), ]
}
lastFilename <- c()
for (i in 1:length(cellLines[i])){
# subset Yeh_Salmon samp info by cell line
sampsubset <- sampInfo[grep(cellLines[i], sampInfo$filename), ]
}
lastFilename <- c()
for (i in 1:length(cellLines[i])){
# subset Yeh_Salmon samp info by cell line
sampsubset <- sampInfo[grep(cellLines[i], sampInfo$filename), ]
# filter by untreated and unmixed samples
sampsubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# file names
filename <- as.character(sampsubset$filename)
# list of the last file names for each candidate line
lastFilename <- c(lastFilename, filename)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(lastFilename))
}
View(expSub)
lastFilename <- c()
for (i in 1:length(cellLines[2])){
# subset Yeh_Salmon samp info by cell line
sampsubset <- sampInfo[grep(cellLines[2], sampInfo$filename), ]
# filter by untreated and unmixed samples
sampsubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# file names
filename <- as.character(sampsubset$filename)
# list of the last file names for each candidate line
lastFilename <- c(lastFilename, filename)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(lastFilename))
}
View(expSub)
lastFilename <- c()
for (i in 1:length(cellLines[i])){
# subset Yeh_Salmon samp info by cell line
sampsubset <- sampInfo[grep(cellLines[i], sampInfo$filename), ]
# filter by untreated and unmixed samples
sampsubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# file names
filename <- as.character(sampsubset$filename)
# list of the last file names for each candidate line
lastFilename <- c(lastFilename, filename)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(lastFilename))
}
lastFilename <- c()
for (i in 1:length(cellLines[i])){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[i], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# file names
filename <- c(lastFilename, as.character(sampsubset$filename))
# list of the file names for each line
#lastFilename <- c(lastFilename, filename)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(lastFilename))
}
lastFilename <- c()
for (i in 1:length(cellLines[i])){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[i], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# file names
filename <- c(lastFilename, as.character(sampsubset$filename))
# list of the file names for each line
#lastFilename <- c(lastFilename, filename)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
lastFilename <- c()
for (i in 1:length(cellLines[1])){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[1], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(sampsubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
lastFilename <- c()
for (i in 1:length(cellLines[2])){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[2], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(sampsubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
lastFilename <- c()
for (i in 2:length(cellLines[2])){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[2], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(sampsubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
cellLines <- c("100422", "130411", "140227", "170119")
treatment <- c("untreated", "")
lastFilename <- c()
for (i in 2:length(cellLines[2])){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[2], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(sampsubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
rm(expSub)
cellLines[2]
lastFilename <- c()
for (i in 2:length(cellLines[2])){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[2], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(sampsubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
filename <- c()
for (i in 2:length(cellLines[2])){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[2], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(sampsubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
filename <- c()
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[2], sampInfo$filename), ]
View(lineSubset)
# filter by untreated and unmixed samples
lineSubset <- filter(sampsubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
View(lineSubset)
filename <- c()
for (i in 2:length(cellLines[2])){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[2], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(lineSubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(lineSubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
View(expSub)
filename <- c()
for (i in 1:length(cellLines[i])){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[i], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(lineSubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(lineSubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
View(expSub)
filename <- c()
for (i in 1:length(cellLines)){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[i], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(lineSubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(lineSubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
length(cellLines)
filename <- c()
for (i in 1:length(cellLines)){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[[i]], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(lineSubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(lineSubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
filename <- c()
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[[1]], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(lineSubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(lineSubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[[2]], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(lineSubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(lineSubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
filename <- c()
for (i in 1:length(cellLines)){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[[2]], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(lineSubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(lineSubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
rm(expSub)
filename <- c()
for (i in 1:length(cellLines)){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[[2]], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(lineSubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(lineSubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
filename <- c()
for (i in 1:length(cellLines)){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[[i]], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(lineSubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(lineSubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
rm(i)
filename <- c()
for (i in 1:length(cellLines)){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[[i]], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(lineSubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(lineSubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
i
filename <- c()
for (i in 1:length(cellLines[[i]])){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[[i]], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(lineSubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(lastFilename, as.character(lineSubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
filename <- c()
for (i in 1:length(cellLines[[i]])){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[[i]], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(lineSubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# add filenames to a list
filename <- c(filename, as.character(lineSubset$filename))
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(filename))
}
combinedFilenames <- c()
for (i in 1:length(cellLines[[i]])){
# subset Yeh_Salmon samp info by cell line
lineSubset <- sampInfo[grep(cellLines[[i]], sampInfo$filename), ]
# filter by untreated and unmixed samples
lineSubset <- filter(lineSubset, Treatment_orig %in% treatment, Treatment1 %in% treatment, line != "mix")
# filename for one line
filename <- as.character(lineSubset$filename)
# list of all filenames for every line
combinedFilenames <- c(combinedFilenames, filename)
# index by filename to create expression subset (expSub)
expSub <- subset(Yeh_Salmon[["ex"]], select = c(combinedFilenames))
}
