rep(library_key_2016$Dose5[drug], length(strsplit(library_key_2016$Plate1[5], ",")[[1]])),
rep(library_key_2016$Dose6[drug], length(strsplit(library_key_2016$Plate1[6], ",")[[1]])))
columns <- c(rep(library_key_2016$Column1[drug], length(strsplit(library_key_2016$Plate1[1], ",")[[1]])),
rep(library_key_2016$Column2[drug], length(strsplit(library_key_2016$Plate1[2], ",")[[1]])),
rep(library_key_2016$Column3[drug], length(strsplit(library_key_2016$Plate1[3], ",")[[1]])),
rep(library_key_2016$Column4[drug], length(strsplit(library_key_2016$Plate1[4], ",")[[1]])),
rep(library_key_2016$Column5[drug], length(strsplit(library_key_2016$Plate1[5], ",")[[1]])),
rep(library_key_2016$Column6[drug], length(strsplit(library_key_2016$Plate1[6], ",")[[1]])))
compound <- rep(library_key_2016$Compound[drug], length(doses))
rows <- rep(library_key$Row[drug], length(doses))
temp <- data.table(Compound = compound,
Plate = plates,
Dose = doses,
Row = rows,
Column = columns,
stringsAsFactors = FALSE)
compound_list[[drug]] <- temp
}
# now coerce to a dataframe
compound_df_librarykey <- rbindlist(compound_list)
# repeat the previous operation for librarykey2016
library_drugs <- unique(library_key_2016$Compound)
compound_list <- list()
for (drug in seq(library_drugs)) {
# make this generalizable later
plates <- c(as.numeric(strsplit(library_key_2016[drug, ]$Plate1, ",")[[1]]),
as.numeric(strsplit(library_key_2016[drug, ]$Plate2, ",")[[1]]),
as.numeric(strsplit(library_key_2016[drug, ]$Plate3, ",")[[1]]),
as.numeric(strsplit(library_key_2016[drug, ]$Plate4, ",")[[1]]),
as.numeric(strsplit(library_key_2016[drug, ]$Plate5, ",")[[1]]),
as.numeric(strsplit(library_key_2016[drug, ]$Plate6, ",")[[1]]))
doses <- c(rep(library_key_2016$Dose1[drug], length(strsplit(library_key_2016$Plate1[1], ",")[[1]])),
rep(library_key_2016$Dose2[drug], length(strsplit(library_key_2016$Plate1[2], ",")[[1]])),
rep(library_key_2016$Dose3[drug], length(strsplit(library_key_2016$Plate1[3], ",")[[1]])),
rep(library_key_2016$Dose4[drug], length(strsplit(library_key_2016$Plate1[4], ",")[[1]])),
rep(library_key_2016$Dose5[drug], length(strsplit(library_key_2016$Plate1[5], ",")[[1]])),
rep(library_key_2016$Dose6[drug], length(strsplit(library_key_2016$Plate1[6], ",")[[1]])))
columns <- c(rep(library_key_2016$Column1[drug], length(strsplit(library_key_2016$Plate1[1], ",")[[1]])),
rep(library_key_2016$Column2[drug], length(strsplit(library_key_2016$Plate1[2], ",")[[1]])),
rep(library_key_2016$Column3[drug], length(strsplit(library_key_2016$Plate1[3], ",")[[1]])),
rep(library_key_2016$Column4[drug], length(strsplit(library_key_2016$Plate1[4], ",")[[1]])),
rep(library_key_2016$Column5[drug], length(strsplit(library_key_2016$Plate1[5], ",")[[1]])),
rep(library_key_2016$Column6[drug], length(strsplit(library_key_2016$Plate1[6], ",")[[1]])))
compound <- rep(library_key_2016$Compound[drug], length(doses))
rows <- rep(library_key$Row[drug], length(doses))
temp <- data.table(Compound = compound,
Plate = plates,
Dose = doses,
Row = rows,
Column = columns,
stringsAsFactors = FALSE)
compound_list[[drug]] <- temp
}
# coerce to dataframe
compound_df_librarykey2016 <- rbindlist(compound_list)
# finally, create a long version of the metadata dataframe
metadata_list <- list()
for (anchor in seq(nrow(metadata))) {
# plates 1:3 always have dose=0 for anchor 1 & 2
plates <- c(as.numeric(strsplit(metadata$A1PlateRange0[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A1PlateRange1[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A1PlateRange2[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A1PlateRange3[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A2PlateRange1[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A2PlateRange2[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A2PlateRange3[anchor], ",")[[1]]))
doses <- c(rep(metadata$A1Dose0[anchor], length(strsplit(metadata$A1PlateRange0[anchor], ",")[[1]])),
rep(metadata$A1Dose1[anchor], length(strsplit(metadata$A1PlateRange1[anchor], ",")[[1]])),
rep(metadata$A1Dose2[anchor], length(strsplit(metadata$A1PlateRange2[anchor], ",")[[1]])),
rep(metadata$A1Dose3[anchor], length(strsplit(metadata$A1PlateRange3[anchor], ",")[[1]])),
rep(metadata$A2Dose1[anchor], length(strsplit(metadata$A2PlateRange1[anchor], ",")[[1]])),
rep(metadata$A2Dose2[anchor], length(strsplit(metadata$A2PlateRange2[anchor], ",")[[1]])),
rep(metadata$A2Dose3[anchor], length(strsplit(metadata$A2PlateRange3[anchor], ",")[[1]])))
anchors <- c(rep("Anchor doses = 0", 3),
rep(metadata$Anchor1[anchor], (length(doses) - 3) / 2),
rep(metadata$Anchor2[anchor], (length(doses) - 3) / 2))
filenames <- rep(metadata$Filename[anchor], length(doses))
lib_sheets <- rep(metadata$LibrarySheet[anchor], length(doses))
samp_info <- rep(metadata$SampleInfo[anchor], length(doses))
temp <- data.table(Filename = filenames,
SampleInfo = samp_info,
LibrarySheet = lib_sheets,
Anchor = anchors,
Dose = doses,
Plate = plates,
stringsAsFactors = FALSE)
metadata_list[[anchor]] <- temp
}
# coerce to dataframe
metadata_df <- rbindlist(metadata_list)
# save results and return as list
results <- list(metadata_df, compound_df_librarykey, compound_df_librarykey2016)
if (!file.exists("./data/metadata_and_library_key.Rds")) {
saveRDS(results, file = "./data/metadata_and_library_key.Rds")
}
return(results)
}
library(openxlsx)
library(data.table)
set.seed(seed.use)  # not explicitly needed, but just in case
seed.use=629
set.seed(seed.use)  # not explicitly needed, but just in case
# load metadata
temp <- reformatMetadata()
readData <- function(parent.dir, file.name, sheet.name = 1, col.names = TRUE) {
filepath <- sprintf("%s%s.xlsx",
parent.dir,
file.name)
sprintf("Reading file: %s", file.name)
df <- read.xlsx(filepath,
sheet = sheet.name,
colNames = col.names)
return(df)
}
# load metadata
temp <- reformatMetadata()
metadata <- temp[[1]]
library_key <- temp[[2]]
library_key_2016 <- temp[[3]]
# load raw plate data into list
HTS_data <- list()
lib_sheets <- list()
file=1
# load raw HTS data
raw_data <- readData(parent.dir = "./data/rawdata/",
file.name = metadata$Filename[file],
col.names = FALSE)
# plate info
raw_data$Plate_ID <- rep(NA, nrow(raw_data))
raw_data$Plate_ID <- rep(1:21, each = 16)
library_sheet <- ifelse(metadata$LibrarySheet[1] == "LibraryKey",
"LibraryKey",
"LibraryKey2016")
# load raw plate data into list
HTS_data <- list()
lib_sheets <- list()
for (file in seq(unique(metadata$Filename))) {
# load raw HTS data
raw_data <- readData(parent.dir = "./data/rawdata/",
file.name = metadata$Filename[file],
col.names = FALSE)
# plate info
raw_data$Plate_ID <- rep(NA, nrow(raw_data))
raw_data$Plate_ID <- rep(1:21, each = 16)
library_sheet <- ifelse(metadata$LibrarySheet[1] == "LibraryKey",
"LibraryKey",
"LibraryKey2016")
# save it for later -- might eventually wrap for loops in a subroutine then call lapply() on list
HTS_data[[file]] <- raw_data
lib_sheets[[file]] <- library_sheet
}
View(HTS_data)
typeof(HTS_data[[1]]$Plate_ID)
View(library_key)
View(metadata)
# load library sheets
library_key <- readData(parent.dir = "./data/",
file.name = "v3_YehLab_compound_library_synergy_screen_metadata",
sheet.name = "LibraryKey",
col.names = TRUE)
View(library_key)
# add raw plate data to library_key
raw_results <- list()
View(HTS_data[[i]])
View(HTS_data[[1]])
library_key <- temp[[2]]
# add raw plate data to library_key
drug_results <- list()
for (i in seq(lib_sheets)) {
if (lib_sheets[[i]] == "LibraryKey") {
drug_results[[i]] <- library_key
} else {
drug_results[[i]] <- library_key_2016
}
}
View(metadata)
View(drug_results[[1]])
View(metadata)
unique(metadata)
unique(metadata$Filename)
unique(metadata$Anchor)
i=1
lib_sheets[[i]]
t <- library_key_2016
unique(metadata$Filename)
metadata_sub <- metadata[metadata$Filename == unique(metadata$Filename)[i], ]
View(metadata_sub)
7392/21
typeof(metadata$Plate[1])
t$Anchor <- rep(NA, nrow(t))
View(t)
for (j in seq(nrow(t))) {
t$Anchor[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Anchor
}
View(HTS_data[[1]])
t$RawScore <- rep(NA, nrow(t))
j=1
HTS_sub <- HTS_data[[i]][HTS_data[[i]]$Plate_ID == t$Plate[j], ]
View(HTS_sub)
t$RawScore[j] <- HTS_sub[t$Row[j], t$Column[j]]
for (j in seq(nrow(t))) {
t$Anchor[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Anchor
HTS_sub <- HTS_data[[i]][HTS_data[[i]]$Plate_ID == t$Plate[j], ]
t$RawScore[j] <- HTS_sub[t$Row[j], t$Column[j]]
}
length(which(is.na(t$RawScore)))
length(which(is.na(t$Anchor)))
7392*17
unique(lib_sheets)
View(lib_sheets)
unique(metadata$LibrarySheet)
for (file in seq(unique(metadata$Filename))) {
# load raw HTS data
raw_data <- readData(parent.dir = "./data/rawdata/",
file.name = metadata$Filename[file],
col.names = FALSE)
# plate info
raw_data$Plate_ID <- rep(NA, nrow(raw_data))
raw_data$Plate_ID <- rep(1:21, each = 16)
library_sheet <- ifelse(metadata$LibrarySheet[file] == "LibraryKey",
"LibraryKey",
"LibraryKey2016")
# save it for later
HTS_data[[file]] <- raw_data
lib_sheets[[file]] <- library_sheet
}
unique(lib_sheets)
unique(metadata$LibrarySheet)
table(metadata$LibrarySheet)
metadata$LibrarySheet[1]
metadata$LibrarySheet[2]
metadata$LibrarySheet[45]
file=45
library_sheet <- ifelse(metadata$LibrarySheet[file] == "LibraryKey",
"LibraryKey",
"LibraryKey2016")
# load raw plate data into list & create matching library key list
HTS_data <- list()
lib_sheets <- list()
for (file in seq(unique(metadata$Filename))) {
# load raw HTS data
raw_data <- readData(parent.dir = "./data/rawdata/",
file.name = metadata$Filename[file],
col.names = FALSE)
# plate info
raw_data$Plate_ID <- rep(NA, nrow(raw_data))
raw_data$Plate_ID <- rep(1:21, each = 16)
library_sheet <- ifelse(unique(metadata$LibrarySheet)[file] == "LibraryKey",
"LibraryKey",
"LibraryKey2016")
# save it for later
HTS_data[[file]] <- raw_data
lib_sheets[[file]] <- library_sheet
}
unique(lib_sheets)
unique(metadata$LibrarySheet)
# load raw plate data into list & create matching library key list
HTS_data <- list()
lib_sheets <- list()
for (file in seq(unique(metadata$Filename))) {
# load raw HTS data
raw_data <- readData(parent.dir = "./data/rawdata/",
file.name = metadata$Filename[file],
col.names = FALSE)
# plate info
raw_data$Plate_ID <- rep(NA, nrow(raw_data))
raw_data$Plate_ID <- rep(1:21, each = 16)
library_sheet <- ifelse(metadata[metadata$Filename == unique(metadata)[file], ]$LibrarySheet[1] == "LibraryKey",
"LibraryKey",
"LibraryKey2016")
# save it for later
HTS_data[[file]] <- raw_data
lib_sheets[[file]] <- library_sheet
}
# load raw plate data into list & create matching library key list
HTS_data <- list()
lib_sheets <- list()
for (file in seq(unique(metadata$Filename))) {
# load raw HTS data
raw_data <- readData(parent.dir = "./data/rawdata/",
file.name = metadata$Filename[file],
col.names = FALSE)
# plate info
raw_data$Plate_ID <- rep(NA, nrow(raw_data))
raw_data$Plate_ID <- rep(1:21, each = 16)
library_sheet <- ifelse(metadata[metadata$Filename == unique(metadata$Filename)[file], ]$LibrarySheet[1] == "LibraryKey",
"LibraryKey",
"LibraryKey2016")
# save it for later
HTS_data[[file]] <- raw_data
lib_sheets[[file]] <- library_sheet
}
unique(lib_sheets)
# create list containing library drug locations / doses for each 2-anchor `.xlsx` file
drug_results <- list()
for (i in seq(lib_sheets)) {
if (lib_sheets[[i]] == "LibraryKey") {
t <- library_key
# add anchor / score placeholder columns to library_key
t$Anchor <- rep(NA, nrow(t))
t$RawScore <- rep(NA, nrow(t))
# create subset of metadata corresponding to raw `.xlsx` file
metadata_sub <- metadata[metadata$Filename == unique(metadata$Filename)[i], ]
for (j in seq(nrow(t))) {
t$Anchor[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Anchor
HTS_sub <- HTS_data[[i]][HTS_data[[i]]$Plate_ID == t$Plate[j], ]
t$RawScore[j] <- HTS_sub[t$Row[j], t$Column[j]]
}
drug_results[[i]] <- t
} else {
t <- library_key_2016
t$Anchor <- rep(NA, nrow(t))
t$RawScore <- rep(NA, nrow(t))
metadata_sub <- metadata[metadata$Filename == unique(metadata$Filename)[i], ]
for (j in seq(nrow(t))) {
t$Anchor[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Anchor
HTS_sub <- HTS_data[[i]][HTS_data[[i]]$Plate_ID == t$Plate[j], ]
t$RawScore[j] <- HTS_sub[t$Row[j], t$Column[j]]
}
drug_results[[i]] <- t
}
}
lib_sheets[[i]]
t <- library_key
# add anchor / score placeholder columns to library_key
t$Anchor <- rep(NA, nrow(t))
t$RawScore <- rep(NA, nrow(t))
# create subset of metadata corresponding to raw `.xlsx` file
metadata_sub <- metadata[metadata$Filename == unique(metadata$Filename)[i], ]
t$Anchor[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Anchor
t$Plate[j]
metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Anchor
# create subset of metadata corresponding to raw `.xlsx` file
metadata_sub <- metadata[metadata$Filename == unique(metadata$Filename)[i], ]
View(metadata_sub)
q=drug_results[[1]]
View(q)
t$AnchorDose <- rep(NA, nrow(t))
i=1
j=1
lib_sheets[[i]]
t <- library_key_2016
t$Anchor <- rep(NA, nrow(t))
t$AnchorDose <- rep(NA, nrow(t))
t$RawScore <- rep(NA, nrow(t))
# create subset of metadata corresponding to raw `.xlsx` file
metadata_sub <- metadata[metadata$Filename == unique(metadata$Filename)[i], ]
View(metadata_sub)
for (j in seq(nrow(t))) {
t$Anchor[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Anchor
t$AnchorDose[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Dose
HTS_sub <- HTS_data[[i]][HTS_data[[i]]$Plate_ID == t$Plate[j], ]
t$RawScore[j] <- HTS_sub[t$Row[j], t$Column[j]]
}
View(t)
View(metadata)
length(which(is.na(metadata$Plate)))
which(is.na(metadata$Plate))
rm(q)
7392*17
q=subset(t, t$Compound == unique(t$Compound)[1])
View(q)
p=subset(q, q$Anchor == "Etinostat" | q$Anchor == "Anchor doses = 0")
View(p)
p=subset(q, q$Anchor == "Entinostat" | q$Anchor == "Anchor doses = 0")
# create list containing library drug locations / doses for each 2-anchor `.xlsx` file
drug_results <- list()
for (i in seq(lib_sheets)) {
if (lib_sheets[[i]] == "LibraryKey") {
t <- library_key
# add anchor / score placeholder columns to library_key
t$Anchor <- rep(NA, nrow(t))
t$AnchorDose <- rep(NA, nrow(t))
t$RawScore <- rep(NA, nrow(t))
# create subset of metadata corresponding to anchor info raw `.xlsx` file
metadata_sub <- metadata[metadata$Filename == unique(metadata$Filename)[i], ]
for (j in seq(nrow(t))) {
t$Anchor[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Anchor
t$AnchorDose[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Dose
HTS_sub <- HTS_data[[i]][HTS_data[[i]]$Plate_ID == t$Plate[j], ]
t$RawScore[j] <- HTS_sub[t$Row[j], t$Column[j]]
}
drug_results[[i]] <- t
} else {
t <- library_key_2016
t$Anchor <- rep(NA, nrow(t))
t$AnchorDose <- rep(NA, nrow(t))
t$RawScore <- rep(NA, nrow(t))
# create subset of metadata corresponding to anchor info for raw `xlsx` file
metadata_sub <- metadata[metadata$Filename == unique(metadata$Filename)[i], ]
for (j in seq(nrow(t))) {
t$Anchor[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Anchor
t$AnchorDose[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Dose
HTS_sub <- HTS_data[[i]][HTS_data[[i]]$Plate_ID == t$Plate[j], ]
t$RawScore[j] <- HTS_sub[t$Row[j], t$Column[j]]
}
drug_results[[i]] <- t
}
}
if (lib_sheets[[i]] == "LibraryKey") {
t <- library_key
} else {
t <- library_key_2016
}
lib_sheets[[i]]
# add anchor / score placeholder columns to library_key
t$Anchor <- rep(NA, nrow(t))
t$AnchorDose <- rep(NA, nrow(t))
t$RawScore <- rep(NA, nrow(t))
View(t)
# create subset of metadata corresponding to anchor info raw `.xlsx` file
metadata_sub <- metadata[metadata$Filename == unique(metadata$Filename)[i], ]
unique(metadata$Filename)[i]
m_temp <- readData(parent.dir = "./data/",
file.name = "v3_YehLab_compound_library_synergy_screen_metadata",
col.names = TRUE)
View(m_temp)
i
# remove unecessary metadata
metadata <- metadata[-c(3, 4, 6), ]
metadata <- temp[[1]]
m_temp <- m_temp[-c(3, 4, 6), ]
m_temp$Filename[i]
View(m_temp)
m_temp$Filename[7]
devtools::document()
devtools::document()
library(YehLabHTS)
seed.use=629
# load metadata & library keys
temp <- reformatMetadata()
metadata <- temp[[1]]
library_key <- temp[[2]]
library_key_2016 <- temp[[3]]
# load raw plate data into list & create matching library key list
HTS_data <- list()
lib_sheets <- list()
for (file in seq(unique(metadata$Filename))) {
# load raw HTS data
raw_data <- readData(parent.dir = "./data/rawdata/",
file.name = metadata$Filename[file],
col.names = FALSE)
# plate info
raw_data$Plate_ID <- rep(NA, nrow(raw_data))
raw_data$Plate_ID <- rep(1:21, each = 16)
# little bit complicated if / else assignment due to how I'm using seq(), but I promise it works
library_sheet <- ifelse(metadata[metadata$Filename == unique(metadata$Filename)[file], ]$LibrarySheet[1] == "LibraryKey",
"LibraryKey",
"LibraryKey2016")
# save it for later
HTS_data[[file]] <- raw_data
lib_sheets[[file]] <- library_sheet
}
# create list containing library drug locations / doses & combine with anchor info
drug_results <- list()
i=1
if (lib_sheets[[i]] == "LibraryKey") {
t <- library_key
} else {
t <- library_key_2016
}
# add anchor / score placeholder columns to library_key
t$Anchor <- rep(NA, nrow(t))
t$AnchorDose <- rep(NA, nrow(t))
t$RawScore <- rep(NA, nrow(t))
# create subset of metadata corresponding to anchor info raw `.xlsx` file
metadata_sub <- metadata[metadata$Filename == unique(metadata$Filename)[i], ]
# fill in anchor drug / dose / raw score
for (j in seq(nrow(t))) {
t$Anchor[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Anchor
t$AnchorDose[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Dose
HTS_sub <- HTS_data[[i]][HTS_data[[i]]$Plate_ID == t$Plate[j], ]
t$RawScore[j] <- HTS_sub[t$Row[j], t$Column[j]]
}
# save drug_results[[i]] as temp var t (again) to avoid editing original data
t <- drug_results[[i]]
# create temp var t to avoid editing original library key datasets
if (lib_sheets[[i]] == "LibraryKey") {
t <- library_key
} else {
t <- library_key_2016
}
# add anchor / score placeholder columns to library_key
t$Anchor <- rep(NA, nrow(t))
t$AnchorDose <- rep(NA, nrow(t))
t$RawScore <- rep(NA, nrow(t))
# create subset of metadata corresponding to anchor info raw `.xlsx` file
metadata_sub <- metadata[metadata$Filename == unique(metadata$Filename)[i], ]
# fill in anchor drug / dose / raw score
for (j in seq(nrow(t))) {
t$Anchor[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Anchor
t$AnchorDose[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Dose
HTS_sub <- HTS_data[[i]][HTS_data[[i]]$Plate_ID == t$Plate[j], ]
t$RawScore[j] <- HTS_sub[t$Row[j], t$Column[j]]
}
drug_results[[i]] <- t
View(t)
unique(t$Anchor)
336*24
dim(t)
HTS_raw <- HTS_data[[i]]
View(t)
unique(t$Dose)
View(t)
max(t$Column)
min(t$Column)
p=subset(t, t$Anchor == "Entinostat" | t$Anchor == "Anchor doses = 0")
View(p)
View(metadata)
View(t)
library(YehLabHTS)
?parseHTSData
