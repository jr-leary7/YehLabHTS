doses <- c(rep(library_key_2016$Dose1[drug], length(strsplit(library_key_2016$Plate1[1], ",")[[1]])),
rep(library_key_2016$Dose2[drug], length(strsplit(library_key_2016$Plate1[2], ",")[[1]])),
rep(library_key_2016$Dose3[drug], length(strsplit(library_key_2016$Plate1[3], ",")[[1]])),
rep(library_key_2016$Dose4[drug], length(strsplit(library_key_2016$Plate1[4], ",")[[1]])),
rep(library_key_2016$Dose5[drug], length(strsplit(library_key_2016$Plate1[5], ",")[[1]])),
rep(library_key_2016$Dose6[drug], length(strsplit(library_key_2016$Plate1[6], ",")[[1]])))
columns <- c(rep(library_key_2016$Column1[drug], length(strsplit(library_key_2016$Plate1[1], ",")[[1]])),
rep(library_key_2016$Column2[drug], length(strsplit(library_key_2016$Plate1[2], ",")[[1]])),
rep(library_key_2016$Column3[drug], length(strsplit(library_key_2016$Plate1[3], ",")[[1]])),
rep(library_key_2016$Column4[drug], length(strsplit(library_key_2016$Plate1[4], ",")[[1]])),
rep(library_key_2016$Column5[drug], length(strsplit(library_key_2016$Plate1[5], ",")[[1]])),
rep(library_key_2016$Column6[drug], length(strsplit(library_key_2016$Plate1[6], ",")[[1]])))
compound <- rep(library_key_2016$Compound[drug], length(doses))
rows <- rep(library_key$Row[drug], length(doses))
temp <- data.table(Compound = compound,
Plate = plates,
Dose = doses,
Row = rows,
Column = columns,
stringsAsFactors = FALSE)
compound_list[[drug]] <- temp
}
# coerce to dataframe
compound_df_librarykey2016 <- rbindlist(compound_list)
# finally, create a long version of the metadata dataframe
metadata_list <- list()
for (anchor in seq(nrow(metadata))) {
# plates 1:3 always have dose=0 for anchor 1 & 2 (in this experiment)
plates <- c(as.numeric(strsplit(metadata$A1PlateRange0[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A1PlateRange1[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A1PlateRange2[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A1PlateRange3[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A2PlateRange1[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A2PlateRange2[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A2PlateRange3[anchor], ",")[[1]]))
doses <- c(rep(metadata$A1Dose0[anchor], length(strsplit(metadata$A1PlateRange0[anchor], ",")[[1]])),
rep(metadata$A1Dose1[anchor], length(strsplit(metadata$A1PlateRange1[anchor], ",")[[1]])),
rep(metadata$A1Dose2[anchor], length(strsplit(metadata$A1PlateRange2[anchor], ",")[[1]])),
rep(metadata$A1Dose3[anchor], length(strsplit(metadata$A1PlateRange3[anchor], ",")[[1]])),
rep(metadata$A2Dose1[anchor], length(strsplit(metadata$A2PlateRange1[anchor], ",")[[1]])),
rep(metadata$A2Dose2[anchor], length(strsplit(metadata$A2PlateRange2[anchor], ",")[[1]])),
rep(metadata$A2Dose3[anchor], length(strsplit(metadata$A2PlateRange3[anchor], ",")[[1]])))
anchors <- c(rep("Anchor doses = 0", 3),
rep(metadata$Anchor1[anchor], (length(doses) - 3) / 2),
rep(metadata$Anchor2[anchor], (length(doses) - 3) / 2))
filenames <- rep(metadata$Filename[anchor], length(doses))
lib_sheets <- rep(metadata$LibrarySheet[anchor], length(doses))
samp_info <- rep(metadata$SampleInfo[anchor], length(doses))
temp <- data.table(Filename = filenames,
SampleInfo = samp_info,
LibrarySheet = lib_sheets,
Anchor = anchors,
Dose = doses,
Plate = plates,
stringsAsFactors = FALSE)
metadata_list[[anchor]] <- temp
}
# coerce to dataframe
metadata_df <- rbindlist(metadata_list)
# save results and return as list
results <- list(metadata_df, compound_df_librarykey, compound_df_librarykey2016)
save(results, file = "./data/metadata_and_library_key.RData")
data("data/metadata_and_library_key.RData")
data("metadata_and_library_key.RData")
data("data/metadata_and_library_key.RData")
library(YehLabHTS)
data("data/metadata_and_library_key.RData")
data("metadata_and_library_key.RData")
data("metadata_and_library_key")
data("metadata_and_library_key")
force(results)
data("metadata_and_library_key")
assign("metadata_and_library_key", metadata_and_library_key, envir = .GlobalEnv)
assign("results", metadata_and_library_key, envir = .GlobalEnv)
assign("metadata_and_library_key", results, envir = .GlobalEnv)
data("metadata_and_library_key")
assign("metadata_and_library_key", results, envir = .GlobalEnv)
data("metadata_and_library_key")
assign(results, envir = .GlobalEnv)
assign("results", results, envir = .GlobalEnv)
data("metadata_and_library_key")
assign("results", results, envir = .GlobalEnv)
library(YehLabHTS)
# save raw plate data in a list so that it can be a global environment variable later
raw_list <- list()
readData <- function(parent.dir, file.name, sheet.name = 1, col.names = TRUE) {
filepath <- sprintf("%s%s.xlsx",
parent.dir,
file.name)
sprintf("Reading file: %s", file.name)
df <- read.xlsx(filepath,
sheet = sheet.name,
colNames = col.names)
return(df)
}
metadata <- readData(parent.dir = "./data/",
file.name = "v3_YehLab_compound_library_synergy_screen_metadata",
col.names = TRUE)
# remove unecessary metadata
metadata <- metadata[-c(3, 4), ]  # files we don't want
metadata <- na.omit(metadata)  # necessary to parse correctly
# load library sheets
library_key <- readData(parent.dir = "./data/",
file.name = "v3_YehLab_compound_library_synergy_screen_metadata",
sheet.name = "LibraryKey",
col.names = TRUE)
library_key_2016 <- readData(parent.dir = "./data/",
file.name = "v3_YehLab_compound_library_synergy_screen_metadata",
sheet.name = "LibraryKey2016",
col.names = TRUE)
# reformat library datasets
library_drugs <- unique(library_key$Compound)
# create librarykey dataframe w/ compound, plate, row/col, & dose
compound_list <- list()
for (drug in seq(library_drugs)) {
# 7392 wells per `xlsx` file --> 336*24 - 216*21 = 7392
plates <- c(as.numeric(strsplit(library_key_2016[drug, ]$Plate1, ",")[[1]]),
as.numeric(strsplit(library_key_2016[drug, ]$Plate2, ",")[[1]]),
as.numeric(strsplit(library_key_2016[drug, ]$Plate3, ",")[[1]]),
as.numeric(strsplit(library_key_2016[drug, ]$Plate4, ",")[[1]]),
as.numeric(strsplit(library_key_2016[drug, ]$Plate5, ",")[[1]]),
as.numeric(strsplit(library_key_2016[drug, ]$Plate6, ",")[[1]]))
doses <- c(rep(library_key_2016$Dose1[drug], length(strsplit(library_key_2016$Plate1[1], ",")[[1]])),
rep(library_key_2016$Dose2[drug], length(strsplit(library_key_2016$Plate1[2], ",")[[1]])),
rep(library_key_2016$Dose3[drug], length(strsplit(library_key_2016$Plate1[3], ",")[[1]])),
rep(library_key_2016$Dose4[drug], length(strsplit(library_key_2016$Plate1[4], ",")[[1]])),
rep(library_key_2016$Dose5[drug], length(strsplit(library_key_2016$Plate1[5], ",")[[1]])),
rep(library_key_2016$Dose6[drug], length(strsplit(library_key_2016$Plate1[6], ",")[[1]])))
columns <- c(rep(library_key_2016$Column1[drug], length(strsplit(library_key_2016$Plate1[1], ",")[[1]])),
rep(library_key_2016$Column2[drug], length(strsplit(library_key_2016$Plate1[2], ",")[[1]])),
rep(library_key_2016$Column3[drug], length(strsplit(library_key_2016$Plate1[3], ",")[[1]])),
rep(library_key_2016$Column4[drug], length(strsplit(library_key_2016$Plate1[4], ",")[[1]])),
rep(library_key_2016$Column5[drug], length(strsplit(library_key_2016$Plate1[5], ",")[[1]])),
rep(library_key_2016$Column6[drug], length(strsplit(library_key_2016$Plate1[6], ",")[[1]])))
compound <- rep(library_key_2016$Compound[drug], length(doses))
rows <- rep(library_key$Row[drug], length(doses))
temp <- data.table(Compound = compound,
Plate = plates,
Dose = doses,
Row = rows,
Column = columns,
stringsAsFactors = FALSE)
compound_list[[drug]] <- temp
}
# now coerce to a dataframe
compound_df_librarykey <- rbindlist(compound_list)
# repeat the previous operation for librarykey2016
library_drugs <- unique(library_key_2016$Compound)
compound_list <- list()
for (drug in seq(library_drugs)) {
# make this generalizable to a different plate size / experimental design later
plates <- c(as.numeric(strsplit(library_key_2016[drug, ]$Plate1, ",")[[1]]),
as.numeric(strsplit(library_key_2016[drug, ]$Plate2, ",")[[1]]),
as.numeric(strsplit(library_key_2016[drug, ]$Plate3, ",")[[1]]),
as.numeric(strsplit(library_key_2016[drug, ]$Plate4, ",")[[1]]),
as.numeric(strsplit(library_key_2016[drug, ]$Plate5, ",")[[1]]),
as.numeric(strsplit(library_key_2016[drug, ]$Plate6, ",")[[1]]))
doses <- c(rep(library_key_2016$Dose1[drug], length(strsplit(library_key_2016$Plate1[1], ",")[[1]])),
rep(library_key_2016$Dose2[drug], length(strsplit(library_key_2016$Plate1[2], ",")[[1]])),
rep(library_key_2016$Dose3[drug], length(strsplit(library_key_2016$Plate1[3], ",")[[1]])),
rep(library_key_2016$Dose4[drug], length(strsplit(library_key_2016$Plate1[4], ",")[[1]])),
rep(library_key_2016$Dose5[drug], length(strsplit(library_key_2016$Plate1[5], ",")[[1]])),
rep(library_key_2016$Dose6[drug], length(strsplit(library_key_2016$Plate1[6], ",")[[1]])))
columns <- c(rep(library_key_2016$Column1[drug], length(strsplit(library_key_2016$Plate1[1], ",")[[1]])),
rep(library_key_2016$Column2[drug], length(strsplit(library_key_2016$Plate1[2], ",")[[1]])),
rep(library_key_2016$Column3[drug], length(strsplit(library_key_2016$Plate1[3], ",")[[1]])),
rep(library_key_2016$Column4[drug], length(strsplit(library_key_2016$Plate1[4], ",")[[1]])),
rep(library_key_2016$Column5[drug], length(strsplit(library_key_2016$Plate1[5], ",")[[1]])),
rep(library_key_2016$Column6[drug], length(strsplit(library_key_2016$Plate1[6], ",")[[1]])))
compound <- rep(library_key_2016$Compound[drug], length(doses))
rows <- rep(library_key$Row[drug], length(doses))
temp <- data.table(Compound = compound,
Plate = plates,
Dose = doses,
Row = rows,
Column = columns,
stringsAsFactors = FALSE)
compound_list[[drug]] <- temp
}
# coerce to dataframe
compound_df_librarykey2016 <- rbindlist(compound_list)
# finally, create a long version of the metadata dataframe
metadata_list <- list()
for (anchor in seq(nrow(metadata))) {
# plates 1:3 always have dose=0 for anchor 1 & 2 (in this experiment)
plates <- c(as.numeric(strsplit(metadata$A1PlateRange0[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A1PlateRange1[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A1PlateRange2[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A1PlateRange3[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A2PlateRange1[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A2PlateRange2[anchor], ",")[[1]]),
as.numeric(strsplit(metadata$A2PlateRange3[anchor], ",")[[1]]))
doses <- c(rep(metadata$A1Dose0[anchor], length(strsplit(metadata$A1PlateRange0[anchor], ",")[[1]])),
rep(metadata$A1Dose1[anchor], length(strsplit(metadata$A1PlateRange1[anchor], ",")[[1]])),
rep(metadata$A1Dose2[anchor], length(strsplit(metadata$A1PlateRange2[anchor], ",")[[1]])),
rep(metadata$A1Dose3[anchor], length(strsplit(metadata$A1PlateRange3[anchor], ",")[[1]])),
rep(metadata$A2Dose1[anchor], length(strsplit(metadata$A2PlateRange1[anchor], ",")[[1]])),
rep(metadata$A2Dose2[anchor], length(strsplit(metadata$A2PlateRange2[anchor], ",")[[1]])),
rep(metadata$A2Dose3[anchor], length(strsplit(metadata$A2PlateRange3[anchor], ",")[[1]])))
anchors <- c(rep("Anchor doses = 0", 3),
rep(metadata$Anchor1[anchor], (length(doses) - 3) / 2),
rep(metadata$Anchor2[anchor], (length(doses) - 3) / 2))
filenames <- rep(metadata$Filename[anchor], length(doses))
lib_sheets <- rep(metadata$LibrarySheet[anchor], length(doses))
samp_info <- rep(metadata$SampleInfo[anchor], length(doses))
temp <- data.table(Filename = filenames,
SampleInfo = samp_info,
LibrarySheet = lib_sheets,
Anchor = anchors,
Dose = doses,
Plate = plates,
stringsAsFactors = FALSE)
metadata_list[[anchor]] <- temp
}
# coerce to dataframe
metadata_df <- rbindlist(metadata_list)
# save raw plate data in a list so that it can be a global environment variable later
raw_list <- list()
unique(metadata$Filename)
for (file in unique(metadata$Filename)) {
raw_list[[file]] <- readData(parent.dir = "./data/rawdata/",
file.name = file,
col.names = FALSE)
}
View(raw_list)
return("Parsing completed successfully !")
"Parsing completed successfully !"
# save raw plate data
names(raw_list) <- unique(metadata$Filename)
View(raw_list)
names(raw_list)[1]
save(raw_list, file = "./data/raw_plates.RData")
data("metadata_and_library_key",
"raw_plates",
package = pkgname,
envir = parent.env(environment()))
data("raw_plates")
assign("raw_plates",
raw_plates,
envir = .GlobalEnv)
data("raw_plates")
assign("raw_plates",
raw_list,
envir = .GlobalEnv)
data("raw_plates")
assign("raw_list",
raw_list,
envir = .GlobalEnv)
data("raw_plates")
View(raw_list)
library(YehLabHTS)
set.seed(seed.use)  # not explicitly needed, but just in case
seed.use=629
set.seed(seed.use)  # not explicitly needed, but just in case
# load metadata & library keys
temp <- results
metadata <- temp[[1]]
library_key <- temp[[2]]
library_key_2016 <- temp[[3]]
# load raw plate data into list & create matching library key list
HTS_data <- list()
lib_sheets <- list()
for (file in seq(unique(metadata$Filename))) {
# load raw HTS data
raw_data <- raw_list[[i]]
# plate info
raw_data$Plate_ID <- rep(NA, nrow(raw_data))
raw_data$Plate_ID <- rep(1:21, each = 16)
# little bit complicated if / else assignment due to how I'm using seq(), but I promise it works
library_sheet <- ifelse(metadata[metadata$Filename == unique(metadata$Filename)[file], ]$LibrarySheet[1] == "LibraryKey",
"LibraryKey",
"LibraryKey2016")
# save it for later
HTS_data[[file]] <- raw_data
lib_sheets[[file]] <- library_sheet
}
head(raw_list[[file]])
for (file in seq(unique(metadata$Filename))) {
# load raw HTS data
raw_data <- raw_list[[file]]
# plate info
raw_data$Plate_ID <- rep(NA, nrow(raw_data))
raw_data$Plate_ID <- rep(1:21, each = 16)
# little bit complicated if / else assignment due to how I'm using seq(), but I promise it works
library_sheet <- ifelse(metadata[metadata$Filename == unique(metadata$Filename)[file], ]$LibrarySheet[1] == "LibraryKey",
"LibraryKey",
"LibraryKey2016")
# save it for later
HTS_data[[file]] <- raw_data
lib_sheets[[file]] <- library_sheet
}
# create list containing library drug locations / doses & combine with anchor info
drug_results <- list()
for (i in seq(lib_sheets)) {
# create temp var t to avoid editing original library key datasets
if (lib_sheets[[i]] == "LibraryKey") {
t <- library_key
} else {
t <- library_key_2016
}
# add anchor / score placeholder columns to library_key
t$Anchor <- rep(NA, nrow(t))
t$AnchorDose <- rep(NA, nrow(t))
t$RawScore <- rep(NA, nrow(t))
# create subset of metadata corresponding to anchor info raw `.xlsx` file
metadata_sub <- metadata[metadata$Filename == unique(metadata$Filename)[i], ]
# fill in anchor drug / dose / raw score
for (j in seq(nrow(t))) {
t$Anchor[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Anchor
t$AnchorDose[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Dose
HTS_sub <- HTS_data[[i]][HTS_data[[i]]$Plate_ID == t$Plate[j], ]
t$RawScore[j] <- HTS_sub[t$Row[j], t$Column[j]]
}
drug_results[[i]] <- t
}
View(drug_results[[1]])
i=1
# save drug_results[[i]] as temp var t (again) to avoid editing original data
t <- drug_results[[i]]
View(t)
t$normalized <- NA
DMSO <- c(HTS_data[[1]][1:8, 1],
HTS_data[[2]][1:8, 1],
HTS_data[[3]][1:8, 1])
mean_DMSO <- mean(DMSO)
t$normalized <- t$RawScore / mean_DMSO * 100
View(t)
# normalize each raw value according to DMSO on first plate of each
for (i in seq(drug_results)) {
# save drug_results[[i]] as temp var t (again) to avoid editing original data
t <- drug_results[[i]]
t$normalized <- NA  # pre-allocate length for memory reasons -- don't worry about it
DMSO <- c(HTS_data[[1]][1:8, 1],
HTS_data[[2]][1:8, 1],
HTS_data[[3]][1:8, 1])
mean_DMSO <- mean(DMSO)
t$normalized <- t$RawScore / mean_DMSO * 100
drug_results[[i]] <- t
}
View(drug_results)
devtools::document()
rm(list = c("raw_list", "results"))
devtools::document()
devtools::document()
library(YehLabHTS)
devtools::document()
devtools::document()
library(YehLabHTS)
library(YehLabHTS)
i=1
metadata <- temp[[1]]
library_key <- temp[[2]]
library_key_2016 <- temp[[3]]
# load metadata & library keys
metadata <- results[[1]]
library_key <- results[[2]]
library_key_2016 <- results[[3]]
# load raw plate data into list & create matching library key list
HTS_data <- list()
lib_sheets <- list()
for (file in seq(unique(metadata$Filename))) {
# load raw HTS data
raw_data <- raw_list[[file]]
# plate info
raw_data$Plate_ID <- rep(NA, nrow(raw_data))
raw_data$Plate_ID <- rep(1:21, each = 16)
# little bit complicated if / else assignment due to how I'm using seq(), but I promise it works
library_sheet <- ifelse(metadata[metadata$Filename == unique(metadata$Filename)[file], ]$LibrarySheet[1] == "LibraryKey",
"LibraryKey",
"LibraryKey2016")
# save it for later
HTS_data[[file]] <- raw_data
lib_sheets[[file]] <- library_sheet
}
# create list containing library drug locations / doses & combine with anchor info
drug_results <- list()
for (i in seq(lib_sheets)) {
# create temp var t to avoid editing original library key datasets
if (lib_sheets[[i]] == "LibraryKey") {
t <- library_key
} else {
t <- library_key_2016
}
# add anchor / score placeholder columns to library_key
t$Anchor <- rep(NA, nrow(t))
t$AnchorDose <- rep(NA, nrow(t))
t$RawScore <- rep(NA, nrow(t))
# create subset of metadata corresponding to anchor info raw `.xlsx` file
metadata_sub <- metadata[metadata$Filename == unique(metadata$Filename)[i], ]
# fill in anchor drug / dose / raw score
for (j in seq(nrow(t))) {
t$Anchor[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Anchor
t$AnchorDose[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Dose
HTS_sub <- HTS_data[[i]][HTS_data[[i]]$Plate_ID == t$Plate[j], ]
t$RawScore[j] <- HTS_sub[t$Row[j], t$Column[j]]
}
drug_results[[i]] <- t
}
# normalize each raw value according to DMSO on first plate of each
for (i in seq(drug_results)) {
# save drug_results[[i]] as temp var t (again) to avoid editing original data
t <- drug_results[[i]]
t$normalized <- NA  # pre-allocate length for memory reasons -- don't worry about it
DMSO <- c(HTS_data[[1]][1:8, 1],
HTS_data[[2]][1:8, 1],
HTS_data[[3]][1:8, 1])
mean_DMSO <- mean(DMSO)
t$normalized <- t$RawScore / mean_DMSO * 100
drug_results[[i]] <- t
}
View(t)
library(YehLabHTS)
load("results")
load("raw_plates")
getwd()
data("raw_plates")
assign("raw_list",
raw_list,
envir = .GlobalEnv)
data("metadata_and_library_key")
assign("results",
results,
envir = .GlobalEnv)
# load metadata & library keys
metadata <- results[[1]]
library_key <- results[[2]]
library_key_2016 <- results[[3]]
# load raw plate data into list & create matching library key list
HTS_data <- list()
lib_sheets <- list()
for (file in seq(unique(metadata$Filename))) {
# load raw HTS data
raw_data <- raw_list[[file]]
# plate info
raw_data$Plate_ID <- rep(NA, nrow(raw_data))
raw_data$Plate_ID <- rep(1:21, each = 16)
# little bit complicated if / else assignment due to how I'm using seq(), but I promise it works
library_sheet <- ifelse(metadata[metadata$Filename == unique(metadata$Filename)[file], ]$LibrarySheet[1] == "LibraryKey",
"LibraryKey",
"LibraryKey2016")
# save it for later
HTS_data[[file]] <- raw_data
lib_sheets[[file]] <- library_sheet
}
# create list containing library drug locations / doses & combine with anchor info
drug_results <- list()
for (i in seq(lib_sheets)) {
# create temp var t to avoid editing original library key datasets
if (lib_sheets[[i]] == "LibraryKey") {
t <- library_key
} else {
t <- library_key_2016
}
# add anchor / score placeholder columns to library_key
t$Anchor <- rep(NA, nrow(t))
t$AnchorDose <- rep(NA, nrow(t))
t$RawScore <- rep(NA, nrow(t))
# create subset of metadata corresponding to anchor info raw `.xlsx` file
metadata_sub <- metadata[metadata$Filename == unique(metadata$Filename)[i], ]
# fill in anchor drug / dose / raw score
for (j in seq(nrow(t))) {
t$Anchor[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Anchor
t$AnchorDose[j] <- metadata_sub[metadata_sub$Plate == t$Plate[j], ]$Dose
HTS_sub <- HTS_data[[i]][HTS_data[[i]]$Plate_ID == t$Plate[j], ]
t$RawScore[j] <- HTS_sub[t$Row[j], t$Column[j]]
}
drug_results[[i]] <- t
}
# normalize each raw value according to DMSO on first plate of each
for (i in seq(drug_results)) {
# save drug_results[[i]] as temp var t (again) to avoid editing original data
t <- drug_results[[i]]
t$normalized <- NA  # pre-allocate length for memory reasons -- don't worry about it
t$inhibition <- NA
DMSO <- c(HTS_data[[1]][1:8, 1],
HTS_data[[2]][1:8, 1],
HTS_data[[3]][1:8, 1])
mean_DMSO <- mean(DMSO)
t$normalized <- t$RawScore / mean_DMSO * 100
t$inhibition <- 100 - t$normalized
drug_results[[i]] <- t
}
View(t)
drug.data=t
library_drugs <- unique(drug.data$Compound)
anchor_drugs <- unique(drug.data$Anchor)
length(unique(drug.data$Dose))
View(drug.data)
bliss_list <- list()
drug=1
# create subset for anchor drug
drug_df <- drug.data[drug.data$Compound == library_drugs[drug], ]
View(drug_df)
devtools::document()
save(drug_results, file = "./data/normalized_data.RData")
# load metadata & library keys
data("results")
# load metadata & library keys
data("raw_plates")
data("metadat_and_library_key")
data("metadata_and_library_key")
data("drug_results")
data("normalized_data")
devtools::document()
library(YehLabHTS)
data("normalized_data")
assign("normalized_data", .GlobalEnv)
assign("drug_results", .GlobalEnv)
data("normalized_data")
assign("drug_results", drug_results, .GlobalEnv)
devtools::document()
library(YehLabHTS)
