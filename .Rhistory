<<<<<<< HEAD
pairs <- unique(paste(drug_results[[1]]$Compound, drug_results[[1]]$Anchor))
library_drugs <- unique(drug_results[[1]]$Compound)
anchor_drugs <- unique(drug_results[[1]]$Anchor)
#anch drugs needs to start at 2 to avoid "anchor doses = 0"
for (i in 2:length(anchor_drugs)) {
print("one")
for(j in 1:length(library_drugs)) {
print("two")
#makes a subset for each unique anchor/lib pair
subset <- drug_results[[1]][ which(drug_results[[1]]$Compound == library_drugs[[j]] & drug_results[[1]]$Anchor == anchor_drugs[[i]])]
subset <- setorder(subset, Dose, AnchorDose)
compound_dose <- unique(subset$Dose)
anchor_dose <- unique(subset$AnchorDose)
#matrix for one anchor/lib pair with compound doses along the y, anchor doses on the x
matrix <- matrix(as.numeric(subset$inhibition), length(anchor_dose), length(compound_dose), byrow = F)
compound_dose <- append(compound_dose, 0)
compound_dose <- sort(compound_dose)
anchor_dose <- append(anchor_dose, 0)
anchor_dose <- sort(anchor_dose)
#add in a row to the matrix for the DMSO anchor dose
zero_dose_anchor <- drug_results[[1]][ which(drug_results[[1]]$Compound == library_drugs[[j]] & drug_results[[1]]$Anchor == "Anchor doses = 0")]
zero_dose_anchor <- zero_dose_anchor[order(Dose),]
matrix <- rbind(zero_dose_anchor$inhibition, matrix)
matrix <- cbind(0, matrix)
colnames(matrix) <- compound_dose
rownames(matrix) <- anchor_dose
#calculates IC50 of lib compound
fit <- drFit(drMat = cbind(as.numeric(colnames(matrix)[c(1:7)]),1-matrix[1, c(1:7)]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
ic50 <- as.numeric(computeIC(fit, log.d=FALSE, interpolation=F))
if(all(1-matrix[1,c(1:7)]/100 > 0.5)) ic50 = NA
print(ic50)
ic50_results <- rbind(ic50_results, c(anchor_drugs[[i]], library_drugs[[j]], ic50))
colnames(ic50_results) <- c("Anchor Drug","Library Drug","ic50")
=======
rep(library_key_2016$Dose4[drug], length(strsplit(library_key_2016$Plate1[4], ",")[[1]])),
rep(library_key_2016$Dose5[drug], length(strsplit(library_key_2016$Plate1[5], ",")[[1]])),
rep(library_key_2016$Dose6[drug], length(strsplit(library_key_2016$Plate1[6], ",")[[1]])))
columns <- c(rep(library_key_2016$Column1[drug], length(strsplit(library_key_2016$Plate1[1], ",")[[1]])),
rep(library_key_2016$Column2[drug], length(strsplit(library_key_2016$Plate1[2], ",")[[1]])),
rep(library_key_2016$Column3[drug], length(strsplit(library_key_2016$Plate1[3], ",")[[1]])),
rep(library_key_2016$Column4[drug], length(strsplit(library_key_2016$Plate1[4], ",")[[1]])),
rep(library_key_2016$Column5[drug], length(strsplit(library_key_2016$Plate1[5], ",")[[1]])),
rep(library_key_2016$Column6[drug], length(strsplit(library_key_2016$Plate1[6], ",")[[1]])))
compound <- rep(library_key_2016$Compound[drug], length(doses))
rows <- rep(library_key$Row[drug], length(doses))
temp <- data.table(Compound = compound,
Plate = plates,
Dose = doses,
Row = rows,
Column = columns,
stringsAsFactors = FALSE)
compound_list[[drug]] <- temp
>>>>>>> 8ff1862cf2697bfa66368acf4ad7c255492bf8ac
}
}
View(ic50_results)
length(drug_results)
calculateIC50 <- function(drug_results) {
ic50_results <- data.frame()
#every library and anchor drug combination
pairs <- unique(paste(drug_results[[1]]$Compound, drug_results[[1]]$Anchor))
library_drugs <- unique(drug_results[[1]]$Compound)
anchor_drugs <- unique(drug_results[[1]]$Anchor)
for(i in seq(drug_results)) {
#anch drugs needs to start at 2 to avoid "anchor doses = 0"
for (i in 2:length(anchor_drugs)) {
for(j in 1:length(library_drugs)) {
#makes a subset for each unique anchor/lib pair
subset <- drug_results[[1]][ which(drug_results[[1]]$Compound == library_drugs[[j]] & drug_results[[1]]$Anchor == anchor_drugs[[i]])]
subset <- setorder(subset, Dose, AnchorDose)
compound_dose <- unique(subset$Dose)
anchor_dose <- unique(subset$AnchorDose)
#matrix for one anchor/lib pair with compound doses along the y, anchor doses on the x
matrix <- matrix(as.numeric(subset$inhibition), length(anchor_dose), length(compound_dose), byrow = F)
compound_dose <- append(compound_dose, 0)
compound_dose <- sort(compound_dose)
anchor_dose <- append(anchor_dose, 0)
anchor_dose <- sort(anchor_dose)
#add in a row to the matrix for the DMSO anchor dose
zero_dose_anchor <- drug_results[[1]][ which(drug_results[[1]]$Compound == library_drugs[[j]] & drug_results[[1]]$Anchor == "Anchor doses = 0")]
zero_dose_anchor <- zero_dose_anchor[order(Dose),]
matrix <- rbind(zero_dose_anchor$inhibition, matrix)
matrix <- cbind(0, matrix)
colnames(matrix) <- compound_dose
rownames(matrix) <- anchor_dose
#calculates IC50 of lib compound only (anchor dose=0)
fit <- drFit(drMat = cbind(as.numeric(colnames(matrix)[c(1:7)]),1-matrix[1, c(1:7)]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
ic50 <- as.numeric(computeIC(fit, log.d=FALSE, interpolation=F))
if(all(1-matrix[1,c(1:7)]/100 > 0.5)) ic50 = NA
print(ic50)
ic50_results <- rbind(ic50_results, c(anchor_drugs[[i]], library_drugs[[j]], ic50))
colnames(ic50_results) <- c("Anchor Drug","Library Drug","ic50")
}
}
}
}
View(ic50_results)
calculateIC50 <- function(drug_results) {
ic50_results <- data.frame()
#every library and anchor drug combination
pairs <- unique(paste(drug_results[[1]]$Compound, drug_results[[1]]$Anchor))
library_drugs <- unique(drug_results[[1]]$Compound)
anchor_drugs <- unique(drug_results[[1]]$Anchor)
for(i in 1:length(drug_results)) {
#anch drugs needs to start at 2 to avoid "anchor doses = 0"
for (i in 2:length(anchor_drugs)) {
for(j in 1:length(library_drugs)) {
#makes a subset for each unique anchor/lib pair
subset <- drug_results[[1]][ which(drug_results[[1]]$Compound == library_drugs[[j]] & drug_results[[1]]$Anchor == anchor_drugs[[i]])]
subset <- setorder(subset, Dose, AnchorDose)
compound_dose <- unique(subset$Dose)
anchor_dose <- unique(subset$AnchorDose)
#matrix for one anchor/lib pair with compound doses along the y, anchor doses on the x
matrix <- matrix(as.numeric(subset$inhibition), length(anchor_dose), length(compound_dose), byrow = F)
compound_dose <- append(compound_dose, 0)
compound_dose <- sort(compound_dose)
anchor_dose <- append(anchor_dose, 0)
anchor_dose <- sort(anchor_dose)
#add in a row to the matrix for the DMSO anchor dose
zero_dose_anchor <- drug_results[[1]][ which(drug_results[[1]]$Compound == library_drugs[[j]] & drug_results[[1]]$Anchor == "Anchor doses = 0")]
zero_dose_anchor <- zero_dose_anchor[order(Dose),]
matrix <- rbind(zero_dose_anchor$inhibition, matrix)
matrix <- cbind(0, matrix)
colnames(matrix) <- compound_dose
rownames(matrix) <- anchor_dose
#calculates IC50 of lib compound only (anchor dose=0)
fit <- drFit(drMat = cbind(as.numeric(colnames(matrix)[c(1:7)]),1-matrix[1, c(1:7)]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
ic50 <- as.numeric(computeIC(fit, log.d=FALSE, interpolation=F))
if(all(1-matrix[1,c(1:7)]/100 > 0.5)) ic50 = NA
print(ic50)
ic50_results <- rbind(ic50_results, c(anchor_drugs[[i]], library_drugs[[j]], ic50))
colnames(ic50_results) <- c("Anchor Drug","Library Drug","ic50")
}
}
}
}
calculateIC50 <- function(drug_results) {
ic50_results <- data.frame()
#every library and anchor drug combination
pairs <- unique(paste(drug_results[[1]]$Compound, drug_results[[1]]$Anchor))
library_drugs <- unique(drug_results[[1]]$Compound)
anchor_drugs <- unique(drug_results[[1]]$Anchor)
for(i in 1:length(drug_results)) {
#anch drugs needs to start at 2 to avoid "anchor doses = 0"
for (i in 2:length(anchor_drugs)) {
for(j in 1:length(library_drugs)) {
#makes a subset for each unique anchor/lib pair
subset <- drug_results[[1]][ which(drug_results[[1]]$Compound == library_drugs[[j]] & drug_results[[1]]$Anchor == anchor_drugs[[i]])]
subset <- setorder(subset, Dose, AnchorDose)
compound_dose <- unique(subset$Dose)
anchor_dose <- unique(subset$AnchorDose)
#matrix for one anchor/lib pair with compound doses along the y, anchor doses on the x
matrix <- matrix(as.numeric(subset$inhibition), length(anchor_dose), length(compound_dose), byrow = F)
compound_dose <- append(compound_dose, 0)
compound_dose <- sort(compound_dose)
anchor_dose <- append(anchor_dose, 0)
anchor_dose <- sort(anchor_dose)
#add in a row to the matrix for the DMSO anchor dose
zero_dose_anchor <- drug_results[[1]][ which(drug_results[[1]]$Compound == library_drugs[[j]] & drug_results[[1]]$Anchor == "Anchor doses = 0")]
zero_dose_anchor <- zero_dose_anchor[order(Dose),]
matrix <- rbind(zero_dose_anchor$inhibition, matrix)
matrix <- cbind(0, matrix)
colnames(matrix) <- compound_dose
rownames(matrix) <- anchor_dose
#calculates IC50 of lib compound only (anchor dose=0)
fit <- drFit(drMat = cbind(as.numeric(colnames(matrix)[c(1:7)]),1-matrix[1, c(1:7)]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
ic50 <- as.numeric(computeIC(fit, log.d=FALSE, interpolation=F))
if(all(1-matrix[1,c(1:7)]/100 > 0.5)) ic50 = NA
print(ic50)
ic50_results <- rbind(ic50_results, c(anchor_drugs[[i]], library_drugs[[j]], ic50))
colnames(ic50_results) <- c("Anchor Drug","Library Drug","ic50")
}
}
}
}
for (i in 2:length(anchor_drugs)) {
for(j in 1:length(library_drugs)) {
#makes a subset for each unique anchor/lib pair
subset <- drug_results[[1]][ which(drug_results[[1]]$Compound == library_drugs[[j]] & drug_results[[1]]$Anchor == anchor_drugs[[i]])]
subset <- setorder(subset, Dose, AnchorDose)
compound_dose <- unique(subset$Dose)
anchor_dose <- unique(subset$AnchorDose)
#matrix for one anchor/lib pair with compound doses along the y, anchor doses on the x
matrix <- matrix(as.numeric(subset$inhibition), length(anchor_dose), length(compound_dose), byrow = F)
compound_dose <- append(compound_dose, 0)
compound_dose <- sort(compound_dose)
anchor_dose <- append(anchor_dose, 0)
anchor_dose <- sort(anchor_dose)
#add in a row to the matrix for the DMSO anchor dose
zero_dose_anchor <- drug_results[[1]][ which(drug_results[[1]]$Compound == library_drugs[[j]] & drug_results[[1]]$Anchor == "Anchor doses = 0")]
zero_dose_anchor <- zero_dose_anchor[order(Dose),]
matrix <- rbind(zero_dose_anchor$inhibition, matrix)
matrix <- cbind(0, matrix)
colnames(matrix) <- compound_dose
rownames(matrix) <- anchor_dose
#calculates IC50 of lib compound only (anchor dose=0)
fit <- drFit(drMat = cbind(as.numeric(colnames(matrix)[c(1:7)]),1-matrix[1, c(1:7)]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
ic50 <- as.numeric(computeIC(fit, log.d=FALSE, interpolation=F))
if(all(1-matrix[1,c(1:7)]/100 > 0.5)) ic50 = NA
print(ic50)
ic50_results <- rbind(ic50_results, c(anchor_drugs[[i]], library_drugs[[j]], ic50))
colnames(ic50_results) <- c("Anchor Drug","Library Drug","ic50")
}
}
for(i in 1:length(drug_results)) {
print("here")
#anch drugs needs to start at 2 to avoid "anchor doses = 0"
for (i in 2:length(anchor_drugs)) {
for(j in 1:length(library_drugs)) {
#makes a subset for each unique anchor/lib pair
subset <- drug_results[[1]][ which(drug_results[[1]]$Compound == library_drugs[[j]] & drug_results[[1]]$Anchor == anchor_drugs[[i]])]
subset <- setorder(subset, Dose, AnchorDose)
compound_dose <- unique(subset$Dose)
anchor_dose <- unique(subset$AnchorDose)
#matrix for one anchor/lib pair with compound doses along the y, anchor doses on the x
matrix <- matrix(as.numeric(subset$inhibition), length(anchor_dose), length(compound_dose), byrow = F)
compound_dose <- append(compound_dose, 0)
compound_dose <- sort(compound_dose)
anchor_dose <- append(anchor_dose, 0)
anchor_dose <- sort(anchor_dose)
#add in a row to the matrix for the DMSO anchor dose
zero_dose_anchor <- drug_results[[1]][ which(drug_results[[1]]$Compound == library_drugs[[j]] & drug_results[[1]]$Anchor == "Anchor doses = 0")]
zero_dose_anchor <- zero_dose_anchor[order(Dose),]
matrix <- rbind(zero_dose_anchor$inhibition, matrix)
matrix <- cbind(0, matrix)
colnames(matrix) <- compound_dose
rownames(matrix) <- anchor_dose
#calculates IC50 of lib compound only (anchor dose=0)
fit <- drFit(drMat = cbind(as.numeric(colnames(matrix)[c(1:7)]),1-matrix[1, c(1:7)]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
ic50 <- as.numeric(computeIC(fit, log.d=FALSE, interpolation=F))
if(all(1-matrix[1,c(1:7)]/100 > 0.5)) ic50 = NA
print(ic50)
ic50_results <- rbind(ic50_results, c(anchor_drugs[[i]], library_drugs[[j]], ic50))
colnames(ic50_results) <- c("Anchor Drug","Library Drug","ic50")
}
}
}
for(h in 1:length(drug_results)) {
print("here")
#anch drugs needs to start at 2 to avoid "anchor doses = 0"
for (i in 2:length(anchor_drugs)) {
for(j in 1:length(library_drugs)) {
#makes a subset for each unique anchor/lib pair
subset <- drug_results[[1]][ which(drug_results[[1]]$Compound == library_drugs[[j]] & drug_results[[1]]$Anchor == anchor_drugs[[i]])]
subset <- setorder(subset, Dose, AnchorDose)
compound_dose <- unique(subset$Dose)
anchor_dose <- unique(subset$AnchorDose)
#matrix for one anchor/lib pair with compound doses along the y, anchor doses on the x
matrix <- matrix(as.numeric(subset$inhibition), length(anchor_dose), length(compound_dose), byrow = F)
compound_dose <- append(compound_dose, 0)
compound_dose <- sort(compound_dose)
anchor_dose <- append(anchor_dose, 0)
anchor_dose <- sort(anchor_dose)
#add in a row to the matrix for the DMSO anchor dose
zero_dose_anchor <- drug_results[[1]][ which(drug_results[[1]]$Compound == library_drugs[[j]] & drug_results[[1]]$Anchor == "Anchor doses = 0")]
zero_dose_anchor <- zero_dose_anchor[order(Dose),]
matrix <- rbind(zero_dose_anchor$inhibition, matrix)
matrix <- cbind(0, matrix)
colnames(matrix) <- compound_dose
rownames(matrix) <- anchor_dose
#calculates IC50 of lib compound only (anchor dose=0)
fit <- drFit(drMat = cbind(as.numeric(colnames(matrix)[c(1:7)]),1-matrix[1, c(1:7)]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
ic50 <- as.numeric(computeIC(fit, log.d=FALSE, interpolation=F))
if(all(1-matrix[1,c(1:7)]/100 > 0.5)) ic50 = NA
print(ic50)
ic50_results <- rbind(ic50_results, c(anchor_drugs[[i]], library_drugs[[j]], ic50))
colnames(ic50_results) <- c("Anchor Drug","Library Drug","ic50")
}
}
}
unique(ic50_results$`Anchor Drug`)
ic50_results
()
ic50_results <- data.frame()
pairs <- unique(paste(drug_results[[1]]$Compound, drug_results[[1]]$Anchor))
library_drugs <- unique(drug_results[[1]]$Compound)
anchor_drugs <- unique(drug_results[[1]]$Anchor)
for(h in 1:length(drug_results)) {
print("here")
#anch drugs needs to start at 2 to avoid "anchor doses = 0"
for (i in 2:length(anchor_drugs)) {
for(j in 1:length(library_drugs)) {
#makes a subset for each unique anchor/lib pair
subset <- drug_results[[h]][ which(drug_results[[h]]$Compound == library_drugs[[j]] & drug_results[[h]]$Anchor == anchor_drugs[[i]])]
subset <- setorder(subset, Dose, AnchorDose)
compound_dose <- unique(subset$Dose)
anchor_dose <- unique(subset$AnchorDose)
#matrix for one anchor/lib pair with compound doses along the y, anchor doses on the x
matrix <- matrix(as.numeric(subset$inhibition), length(anchor_dose), length(compound_dose), byrow = F)
compound_dose <- append(compound_dose, 0)
compound_dose <- sort(compound_dose)
anchor_dose <- append(anchor_dose, 0)
anchor_dose <- sort(anchor_dose)
#add in a row to the matrix for the DMSO anchor dose
zero_dose_anchor <- drug_results[[h]][ which(drug_results[[h]]$Compound == library_drugs[[j]] & drug_results[[h]]$Anchor == "Anchor doses = 0")]
zero_dose_anchor <- zero_dose_anchor[order(Dose),]
matrix <- rbind(zero_dose_anchor$inhibition, matrix)
matrix <- cbind(0, matrix)
colnames(matrix) <- compound_dose
rownames(matrix) <- anchor_dose
#calculates IC50 of lib compound only (anchor dose=0)
fit <- drFit(drMat = cbind(as.numeric(colnames(matrix)[c(1:7)]),1-matrix[1, c(1:7)]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
ic50 <- as.numeric(computeIC(fit, log.d=FALSE, interpolation=F))
if(all(1-matrix[1,c(1:7)]/100 > 0.5)) ic50 = NA
print(ic50)
ic50_results <- rbind(ic50_results, c(anchor_drugs[[i]], library_drugs[[j]], ic50))
colnames(ic50_results) <- c("Anchor Drug","Library Drug","ic50")
}
}
}
View(ic50_results)
View(ic50_results)
for(h in 2:length(drug_results)) {
#anch drugs needs to start at 2 to avoid "anchor doses = 0"
for (i in 2:length(anchor_drugs)) {
for(j in 1:length(library_drugs)) {
#makes a subset for each unique anchor/lib pair
subset <- drug_results[[h]][ which(drug_results[[h]]$Compound == library_drugs[[j]] & drug_results[[h]]$Anchor == anchor_drugs[[i]])]
subset <- setorder(subset, Dose, AnchorDose)
compound_dose <- unique(subset$Dose)
anchor_dose <- unique(subset$AnchorDose)
#matrix for one anchor/lib pair with compound doses along the y, anchor doses on the x
matrix <- matrix(as.numeric(subset$inhibition), length(anchor_dose), length(compound_dose), byrow = F)
compound_dose <- append(compound_dose, 0)
compound_dose <- sort(compound_dose)
anchor_dose <- append(anchor_dose, 0)
anchor_dose <- sort(anchor_dose)
#add in a row to the matrix for the DMSO anchor dose
zero_dose_anchor <- drug_results[[h]][ which(drug_results[[h]]$Compound == library_drugs[[j]] & drug_results[[h]]$Anchor == "Anchor doses = 0")]
zero_dose_anchor <- zero_dose_anchor[order(Dose),]
matrix <- rbind(zero_dose_anchor$inhibition, matrix)
matrix <- cbind(0, matrix)
colnames(matrix) <- compound_dose
rownames(matrix) <- anchor_dose
#calculates IC50 of lib compound only (anchor dose=0)
fit <- drFit(drMat = cbind(as.numeric(colnames(matrix)[c(1:7)]),1-matrix[1, c(1:7)]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
ic50 <- as.numeric(computeIC(fit, log.d=FALSE, interpolation=F))
if(all(1-matrix[1,c(1:7)]/100 > 0.5)) ic50 = NA
print(ic50)
ic50_results <- rbind(ic50_results, c(anchor_drugs[[i]], library_drugs[[j]], ic50))
colnames(ic50_results) <- c("Anchor Drug","Library Drug","ic50")
}
}
}
readData <- function(parent.dir, file.name, sheet.name = 1, col.names = TRUE) {
filepath <- sprintf("%s%s.xlsx",
parent.dir,
file.name)
sprintf("Reading file: %s", file.name)
df <- read.xlsx(filepath,
sheet = sheet.name,
colNames = col.names)
return(df)
}
readData <- function(parent.dir, file.name, sheet.name = 1, col.names = TRUE) {
filepath <- sprintf("%s%s.xlsx",
parent.dir,
file.name)
sprintf("Reading file: %s", file.name)
df <- read.xlsx(filepath,
sheet = sheet.name,
colNames = col.names)
return(df)
}
filepath <- sprintf("%s%s.xlsx",
parent.dir,
file.name)
# now coerce to a dataframe
compound_df_librarykey <- rbindlist(compound_list)
metadata <- readData(parent.dir = "./data/",
file.name = "v3_YehLab_compound_library_synergy_screen_metadata",
col.names = TRUE)
library("openxlsx")
metadata <- readData(parent.dir = "./data/",
file.name = "v3_YehLab_compound_library_synergy_screen_metadata",
col.names = TRUE)
metadata <- readData(parent.dir = "./data/",
file.name = "v3_YehLab_compound_library_synergy_screen_metadata",
col.names = TRUE)
load("/Volumes/Jen Jen Yeh Lab/YehLabGitHub/privateRData/data/Yeh_Salmon_PDX_TruSeq.RData")
View(Yeh_Salmon_PDX_TruSeq)
head(Yeh_Salmon_PDX_TruSeq[["ex"]])
Yeh_Salmon_PDX_TruSeq[["ex"]]
View(Yeh_Salmon_PDX_TruSeq[["ex"]])
Yeh_Salmon_PDX_TruSeq[["decoderWeights"]]
Yeh_Salmon_PDX_TruSeq[["sampInfo"]]
View(Yeh_Salmon_PDX_TruSeq[["sampInfo"]])
View(Yeh_Salmon_PDX_TruSeq[["ex"]])
View(Yeh_Salmon_PDX_TruSeq[["ex"]])
load("/Volumes/Jen Jen Yeh Lab/YehLabGitHub/privateRData/data/Yeh_Salmon_PDX_TruSeq_counts.RData")
View(Yeh_Salmon_PDX_TruSeq_counts)
load("/Volumes/Jen Jen Yeh Lab/YehLabGitHub/privateRData/data/Yeh_Salmon_PDX_TruSeq.RData")
View(Yeh_Salmon_PDX_TruSeq)
View(Yeh_Salmon_PDX_TruSeq[["ex"]])
View(Yeh_Salmon_PDX_TruSeq[["featInfo"]])
View(Yeh_Salmon_PDX_TruSeq[["sampInfo"]])
load("/Volumes/Jen Jen Yeh Lab/YehLabGitHub/privateRData/data/Yeh_Salmon_PDX_TruSeq.RData")
View(Yeh_Salmon_PDX_TruSeq[["sampInfo"]])
View(Yeh_Salmon_PDX_TruSeq)
View(Yeh_Salmon_PDX_TruSeq[["decoderWeights"]])
Yeh_Salmon_PDX_TruSeq[["sampInfo"]]$Type["PDX"]
head(Yeh_Salmon_PDX_TruSeq[["sampInfo"]]$Type["PDX"])
class(Yeh_Salmon_PDX_TruSeq[["sampInfo"]])
subset(Yeh_Salmon_PDX_TruSeq[["sampInfo"]], Type == "PDX")
subset(Yeh_Salmon_PDX_TruSeq[["sampInfo"]], Type == "PDX", DrugTx == "untreated")
subset(Yeh_Salmon_PDX_TruSeq[["sampInfo"]], Type == "PDX" & DrugTx == "untreated")
df <- subset(Yeh_Salmon_PDX_TruSeq[["sampInfo"]], Type == "PDX" & DrugTx == "untreated")
View(Yeh_Salmon_PDX_TruSeq)
View(Yeh_Salmon_PDX_TruSeq)
View(df)
P90319T1 <- df <- subset(Yeh_Salmon_PDX_TruSeq[["sampInfo"]], Type == "PDX" & DrugTx == "untreated" & line ==  "P90319T1")
View(P90319T1)
P90319T1_PDXcells <- df <- subset(Yeh_Salmon_PDX_TruSeq[["sampInfo"]], Type == "PDXcells" & DrugTx == "untreated" & line ==  "P90319T1")
P90319T1_PDX <- df <- subset(Yeh_Salmon_PDX_TruSeq[["sampInfo"]], Type == "PDX" & DrugTx == "untreated" & line ==  "P90319T1")
df <- subset(Yeh_Salmon_PDX_TruSeq[["sampInfo"]], Type == "PDX" & DrugTx == "untreated")
P90319T1_PDX <- subset(Yeh_Salmon_PDX_TruSeq[["sampInfo"]], Type == "PDX" & DrugTx == "untreated" & line ==  "P90319T1")
P90319T1_PDXcells <- subset(Yeh_Salmon_PDX_TruSeq[["sampInfo"]], Type == "PDXcells" & DrugTx == "untreated" & line ==  "P90319T1")
P90710T1_PDXcells <- subset(Yeh_Salmon_PDX_TruSeq[["sampInfo"]], Type == "PDXcells" & DrugTx == "untreated" & line ==  "P90710T1")
P90710T1_PDX <- subset(Yeh_Salmon_PDX_TruSeq[["sampInfo"]], Type == "PDX" & DrugTx == "untreated" & line ==  "P90710T1")
View(P90710T1_PDX)
#Use PDX for type vs PDXcells
all_lines <- list(P130411T1, P100422T1, P90319T1, P190117T2OM, P90710T1, P180129T1LV, P180622T1,  P170713T1,   P110225T1, P110616T1, PancT6)
(sprintf("'%d'", all_lines), collapse = ", ")
paste0(sprintf("'%d'", all_lines) collapse = ", ")
sapply(strsplit(all_lines, '[, ]+'), function(x) toString(dQuote(x)))
#Use PDX for type vs PDXcells
all_lines <- ("P130411T1, P100422T1, P90319T1, P190117T2OM, P90710T1, P180129T1LV, P180622T1,  P170713T1,   P110225T1, P110616T1, PancT6")
sapply(strsplit(all_lines, '[, ]+'), function(x) toString(dQuote(x)))
all_lines <- (strsplit(all_lines, '[, ]+'), function(x) toString(dQuote(x)))
(strsplit(all_lines, '[, ]+'), function(x) toString(dQuote(x)))
("P130411T1, P100422T1, P90319T1, P190117T2OM, P90710T1, P180129T1LV, P180622T1,  P170713T1,   P110225T1, P110616T1, PancT6")
(strsplit(all_lines, '[, ]+'), function(x) toString(dQuote(x)))
sapply(strsplit(all_lines, '[, ]+'), function(x) toString(dQuote(x)))
all_lines
all_lines <- sapply(strsplit(all_lines, '[, ]+'), function(x) toString(dQuote(x)))
all_lines
growing_lines <-(“P90319T1”, “P90710T1”, “P180129T1LV”, “P180622T1”, “P170713T1”, “P110225T1”, “PancT6”)
growing_lines <- (“P90319T1”, “P90710T1”, “P180129T1LV”, “P180622T1”, “P170713T1”, “P110225T1”, “PancT6”)
test <- ("a", "b")
test <- list("a", "b")
test
growing_lines <- list(“P90319T1”, “P90710T1”, “P180129T1LV”, “P180622T1”, “P170713T1”, “P110225T1”, “PancT6”)
(strsplit(all_lines, '[, ]+'), function(x) toString(dQuote(x, FALSE)))
("P130411T1, P100422T1, P90319T1, P190117T2OM, P90710T1, P180129T1LV, P180622T1,  P170713T1,   P110225T1, P110616T1, PancT6")
all_lines <- sapply(strsplit(all_lines, '[, ]+'), function(x) toString(dQuote(x, FALSE)))
cat(all_lines)
("P130411T1, P100422T1, P90319T1, P190117T2OM, P90710T1, P180129T1LV, P180622T1,  P170713T1,   P110225T1, P110616T1, PancT6")
all_lines <- sapply(strsplit(all_lines, '[, ]+'), function(x) toString(dQuote(x)))
cat(all_lines)
#Use PDX for type vs PDXcells
all_lines <- ("P130411T1, P100422T1, P90319T1, P190117T2OM, P90710T1, P180129T1LV, P180622T1,  P170713T1,   P110225T1, P110616T1, PancT6")
all_lines <- cat(gsub("(\\w+)", '"\\1"', words))
all_lines
all_lines <- cat(gsub("(\\w+)", '"\\1"', all_lines))
all_lines
all_lines <- cat(gsub("(\\w+)", '"\\1"', all_lines))
all_lines
#Use PDX for type vs PDXcells
all_lines <- ("P130411T1, P100422T1, P90319T1, P190117T2OM, P90710T1, P180129T1LV, P180622T1,  P170713T1,   P110225T1, P110616T1, PancT6")
all_lines <- cat(gsub("(\\w+)", '"\\1"', all_lines))
("P130411T1", "P100422T1", "P90319T1", "P190117T2OM", "P90710T1", "P180129T1LV", "P180622T1",  "P170713T1",   "P110225T1", "P110616T1", "PancT6")
#Use PDX for type vs PDXcells
all_lines <- list("P130411T1", "P100422T1", "P90319T1", "P190117T2OM", "P90710T1", "P180129T1LV", "P180622T1",  "P170713T1",   "P110225T1", "P110616T1", "PancT6")
growing_lines <- list("P90319T1", "P190117T2OM", "P90710T1", "P180129T1LV", "P180622T1",  "P170713T1",   "P110225T1", "PancT6")
growing_lines <- list("P90319T1", "P90710T1", "P180129T1LV", "P180622T1",  "P170713T1",   "P110225T1", "PancT6")
#Use PDX for type vs PDXcells
all_lines <- list("P130411T1", "P100422T1", "P90319T1", "P190117T2OM", "P90710T1", "P180129T1LV", "P180622T1",  "P170713T1", "P110616T1")
growing_lines <- list("P90319T1", "P90710T1", "P180129T1LV", "P180622T1",  "P170713T1",   "P110225T1")
for(i in seq(growing_lines)){
print("1")
}
<<<<<<< HEAD
head(Yeh_Salmon_PDX_TruSeq[["ex"]][ ,P90319T1_m747_S5_eaton01])
head(Yeh_Salmon_PDX_TruSeq[["ex"]][ ,P101203T1_m833_S10_eaton01])
class(Yeh_Salmon_PDX_TruSeq[["ex"]])
Yeh_Salmon_PDX_TruSeq[["ex"]]$P90319T1_m747_S5_eaton01
head(Yeh_Salmon_PDX_TruSeq[["ex"]]$P90319T1_m747_S5_eaton01)
head(Yeh_Salmon_PDX_TruSeq[["ex"]][ , "P90319T1_m747_S5_eaton01"])
library(dplyr)
library(tibble)
P90319T1 <- Yeh_Salmon_PDX_TruSeq[["ex"]][ , "P90319T1_m747_S5_eaton01"]
P90319T1 %>%
rownames_to_column('gene') %>%
column_to_rownames('gene')
class(P90319T1)
P90319T1 <- df(Yeh_Salmon_PDX_TruSeq[["ex"]][ , "P90319T1_m747_S5_eaton01"])
P90319T1 <- data.frame(Yeh_Salmon_PDX_TruSeq[["ex"]][ , "P90319T1_m747_S5_eaton01"])
class(P90319T1)
P90319T1 %>%
rownames_to_column('gene') %>%
column_to_rownames('gene')
View(P90319T1)
P90319T1 <- data.frame(Yeh_Salmon_PDX_TruSeq[["ex"]][ , "P90319T1_m747_S5_eaton01"])
View(P90319T1)
length(P90319T1)
P90319T1 <- data.frame(Yeh_Salmon_PDX_TruSeq[["ex"]][ , "P90319T1_m747_S5_eaton01"])
row.names(P90319T1) <- row.names(Yeh_Salmon_PDX_TruSeq[["ex"]])
P90319T1 <- order(P90319T1)
#subset by one of the many seq files for P90319T1
P90319T1 <- data.frame(Yeh_Salmon_PDX_TruSeq[["ex"]][ , "P90319T1_m747_S5_eaton01"])
row.names(P90319T1) <- row.names(Yeh_Salmon_PDX_TruSeq[["ex"]])
P90319T1 <- P90319T1[order(),]
#subset by one of the many seq files for P90319T1
P90319T1 <- data.frame(Yeh_Salmon_PDX_TruSeq[["ex"]][ , "P90319T1_m747_S5_eaton01"])
col.names(P90319T1)
names(P90319T1)
colnames(P90319T1) <- ("P90319T1_m747_S5_eaton01")
(Yeh_Salmon_PDX_TruSeq[["ex"]])
row.names(P90319T1) <- row.names(Yeh_Salmon_PDX_TruSeq[["ex"]])
P90319T1 <- P90319T1[order("P90319T1_m747_S5_eaton01"),]
P90319T1 <- data.frame(Yeh_Salmon_PDX_TruSeq[["ex"]][ , "P90319T1_m747_S5_eaton01"])
row.names(P90319T1) <- row.names(Yeh_Salmon_PDX_TruSeq[["ex"]])
colnames(P90319T1) <- ("P90319T1_m747_S5_eaton01")
P90319T1 <- P90319T1[order(P90319T1_m747_S5_eaton01),]
P90319T1 <- data.frame(Yeh_Salmon_PDX_TruSeq[["ex"]][ , "P90319T1_m747_S5_eaton01"])
row.names(P90319T1) <- row.names(Yeh_Salmon_PDX_TruSeq[["ex"]])
colnames(P90319T1) <- ("P90319T1_m747_S5_eaton01")
View(P90319T1)
names(P90319T1)
P90319T1[order(P90319T1_m747_S5_eaton01),]
P90319T1[order(P90319T1_m747_S5_eaton01),]
P90319T1 <- P90319T1[order(P90319T1$P90319T1_m747_S5_eaton01),]
P90319T1 <- P90319T1[order(P90319T1$P90319T1_m747_S5_eaton01, decreasing = TRUE),]
P90319T1 <- P90319T1[order(P90319T1$P90319T1_m747_S5_eaton01, decreasing = FALSE),]
P90319T1 <- data.frame(Yeh_Salmon_PDX_TruSeq[["ex"]][ , "P90319T1_m747_S5_eaton01"])
row.names(P90319T1) <- row.names(Yeh_Salmon_PDX_TruSeq[["ex"]])
colnames(P90319T1) <- ("P90319T1_m747_S5_eaton01")
P90319T1 <- P90319T1[order(P90319T1$P90319T1_m747_S5_eaton01, decreasing = FALSE),]
P90319T1 <- P90319T1[order(P90319T1$P90319T1_m747_S5_eaton01, decreasing = TRUE),]
P90319T1 <- data.frame(Yeh_Salmon_PDX_TruSeq[["ex"]][ , "P90319T1_m747_S5_eaton01"])
row.names(P90319T1) <- row.names(Yeh_Salmon_PDX_TruSeq[["ex"]])
colnames(P90319T1) <- ("P90319T1_m747_S5_eaton01")
P90319T1 <- P90319T1[order(P90319T1$P90319T1_m747_S5_eaton01, decreasing = TRUE),]
=======
View(t)
drug.data=t
library_drugs <- unique(drug.data$Compound)
anchor_drugs <- unique(drug.data$Anchor)
length(unique(drug.data$Dose))
View(drug.data)
bliss_list <- list()
drug=1
# create subset for anchor drug
drug_df <- drug.data[drug.data$Compound == library_drugs[drug], ]
View(drug_df)
devtools::document()
save(drug_results, file = "./data/normalized_data.RData")
# load metadata & library keys
data("results")
# load metadata & library keys
data("raw_plates")
data("metadat_and_library_key")
data("metadata_and_library_key")
data("drug_results")
data("normalized_data")
devtools::document()
library(YehLabHTS)
data("normalized_data")
assign("normalized_data", .GlobalEnv)
assign("drug_results", .GlobalEnv)
data("normalized_data")
assign("drug_results", drug_results, .GlobalEnv)
devtools::document()
library(YehLabHTS)
library(YehLabHTS)
View(drug_results)
View(drug_results[[1]])
>>>>>>> 8ff1862cf2697bfa66368acf4ad7c255492bf8ac
