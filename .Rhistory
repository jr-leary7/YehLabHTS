#anch drugs needs to start at 2 to avoid "anchor doses = 0"
for (i in 2:length(anchor_drugs)) {
for(j in 1:length(library_drugs)) {
library_drugs <- unique(drug_results[[h]]$Compound)
anchor_drugs <- unique(drug_results[[h]]$Anchor)
#makes a subset for each unique anchor/lib pair
unique_pair_subset <- drug_results[[h]][ which(drug_results[[h]]$Compound == library_drugs[[j]] & drug_results[[h]]$Anchor == anchor_drugs[[i]])]
unique_pair_subset <- setorder(unique_pair_subset, Dose, AnchorDose)
compound_dose <- unique(unique_pair_subset$Dose)
anchor_dose <- unique(unique_pair_subset$AnchorDose)
#matrix for one anchor/lib pair with compound doses along the y, anchor doses on the x, as a funct of percent inhibition
inhibitionMatrix <- matrix(as.numeric(unique_pair_subset$inhibition), length(anchor_dose), length(compound_dose), byrow = F)
compound_dose <- append(compound_dose, 0)
compound_dose <- sort(compound_dose)
anchor_dose <- append(anchor_dose, 0)
anchor_dose <- sort(anchor_dose)
#add in a row to the matrix for the DMSO anchor dose
zero_dose_anchor <- drug_results[[h]][ which(drug_results[[h]]$Compound == library_drugs[[j]] & drug_results[[h]]$Anchor == "Anchor doses = 0")]
zero_dose_anchor <- zero_dose_anchor[order(Dose),]
inhibitionMatrix <- rbind(zero_dose_anchor$inhibition, inhibitionMatrix)
inhibitionMatrix <- cbind(0, inhibitionMatrix)
colnames(inhibitionMatrix) <- compound_dose
rownames(inhibitionMatrix) <- anchor_dose
#working calculates IC50 of lib compound only (anchor dose=0)
fit <- drFit(drMat = cbind(as.numeric(colnames(inhibitionMatrix)), 1-inhibitionMatrix[1, ]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
ic50 <- as.numeric(computeIC(fit, log.d = FALSE, interpolation = F))
ic25 <- as.numeric(computeIC(fit, percent = 0.25, log.d = FALSE, interpolation = F))
if(all(inhibitionMatrix[1, ]/100) > .5) ic50 = NA
if(all(inhibitionMatrix[1, ]/100) > .5) ic25 = NA
#print(ic50)
#original
#calculates IC50 of lib compound only (anchor dose=0)
# fit <- drFit(drMat = cbind(as.numeric(colnames(inhibitionMatrix)[c(1:7)]),1-inhibitionMatrix[1, c(1:7)]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
# ic50 <- as.numeric(computeIC(fit, log.d=FALSE, interpolation=F))
# if(all(1-inhibitionMatrix[1,c(1:7)]/100 > 0.5)) ic50 = NA
# print(ic50)
ic50_results <- rbind(ic50_results, c(anchor_drugs[[i]], library_drugs[[j]], ic50, ic25))
colnames(ic50_results) <- c("Anchor Drug","Library Drug","ic50", "ic25")
}
}
}
#total number of IC50 values calculated for 1 drug file (102)
352 - sum(is.na(ic50_results$ic50))
View(ic50_results)
#replace the Inf values to NA
replace.value(ic50_results, c("ic50","ic25"), from = Inf, to= NA, verbose = FALSE)
library(anchors)
#replace the Inf values to NA
replace.value(ic50_results, c("ic50","ic25"), from = Inf, to= NA, verbose = FALSE)
View(ic50_results)
#replace the Inf values to NA
replace.value(ic50_results, c("ic50","ic25"), from = Inf, to= NA, verbose = FALSE)
#replace the Inf values to NA
ic50_results <- replace.value(ic50_results, c("ic50","ic25"), from = Inf, to= NA, verbose = FALSE)
View(ic50_results)
ic50Data <- ic50_results[!is.na(as.numeric(as.character(ic50_results$ic50))),]
ic50Data <- ic50Data[!grepl("Inf", ic50Data$ic50),]
ic50Data <- setorder(ic50Data, ic50)
ic50Data <- as.numeric(ic50Data$ic50)
is.na(ic50_results) <-sapply(ic50_results, is.infinite)
ic50_results2 <- ic50_results %>%
group_by(`Library Drug`)
View(ic50_results2)
ic50_results2 <- ic50_results %>%
group_by(`Library Drug`) %>%
max(ic50)
class(ic50_results2)
is.numeric(ic50_results$ic50)
ic50_results <- as.numeric(ic50_results)
ic50_results %>%
group_by(`Library Drug`) %>%
max(ic50)
ic50_results <- as.numeric(unlist(ic50_results))
ic50_results2 <- as.numeric(unlist(ic50_results2$ic50))
ic50_results2 <- ic50_results2 %>%
group_by(`Library Drug`)
ic50_results2 %>%
group_by(`Library Drug`)
ic50_results2 <- ic50_results2 %>%
group_by(`Library Drug`) %>%
max(ic50)
ic50_results2 <- ic50_results2 %>%
group_by_(`Library Drug`)
class(ic50_results)
class(ic50_results$Library drug)
class(ic50_results2$Library drug)
head(ic50_results2)
str(ic50_results2)
colnames(ic50_results2)
ic_results <- data.frame()
#every library and anchor drug combination
#pairs <- unique(paste(drug_results[[h]]$Compound, drug_results[[h]]$Anchor))
for(h in 1:length(drug_results)) {
#anch drugs needs to start at 2 to avoid "anchor doses = 0"
for (i in 2:length(anchor_drugs)) {
for(j in 1:length(library_drugs)) {
library_drugs <- unique(drug_results[[h]]$Compound)
anchor_drugs <- unique(drug_results[[h]]$Anchor)
#makes a subset for each unique anchor/lib pair
unique_pair_subset <- drug_results[[h]][ which(drug_results[[h]]$Compound == library_drugs[[j]] & drug_results[[h]]$Anchor == anchor_drugs[[i]])]
unique_pair_subset <- setorder(unique_pair_subset, Dose, AnchorDose)
compound_dose <- unique(unique_pair_subset$Dose)
anchor_dose <- unique(unique_pair_subset$AnchorDose)
#matrix for one anchor/lib pair with compound doses along the y, anchor doses on the x, as a funct of percent inhibition
inhibitionMatrix <- matrix(as.numeric(unique_pair_subset$inhibition), length(anchor_dose), length(compound_dose), byrow = F)
compound_dose <- append(compound_dose, 0)
compound_dose <- sort(compound_dose)
anchor_dose <- append(anchor_dose, 0)
anchor_dose <- sort(anchor_dose)
#add in a row to the matrix for the DMSO anchor dose
zero_dose_anchor <- drug_results[[h]][ which(drug_results[[h]]$Compound == library_drugs[[j]] & drug_results[[h]]$Anchor == "Anchor doses = 0")]
zero_dose_anchor <- zero_dose_anchor[order(Dose),]
inhibitionMatrix <- rbind(zero_dose_anchor$inhibition, inhibitionMatrix)
inhibitionMatrix <- cbind(0, inhibitionMatrix)
colnames(inhibitionMatrix) <- compound_dose
rownames(inhibitionMatrix) <- anchor_dose
#working calculates IC50 of lib compound only (anchor dose=0)
fit <- drFit(drMat = cbind(as.numeric(colnames(inhibitionMatrix)), 1-inhibitionMatrix[1, ]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
ic50 <- as.numeric(computeIC(fit, log.d = FALSE, interpolation = F))
ic25 <- as.numeric(computeIC(fit, percent = 0.25, log.d = FALSE, interpolation = F))
if(all(inhibitionMatrix[1, ]/100) > .5) ic50 = NA
if(all(inhibitionMatrix[1, ]/100) > .5) ic25 = NA
#print(ic50)
#original
#calculates IC50 of lib compound only (anchor dose=0)
# fit <- drFit(drMat = cbind(as.numeric(colnames(inhibitionMatrix)[c(1:7)]),1-inhibitionMatrix[1, c(1:7)]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
# ic50 <- as.numeric(computeIC(fit, log.d=FALSE, interpolation=F))
# if(all(1-inhibitionMatrix[1,c(1:7)]/100 > 0.5)) ic50 = NA
# print(ic50)
ic_results <- rbind(ic_results, c(anchor_drugs[[i]], library_drugs[[j]], ic50, ic25))
colnames(ic50_results) <- c("Anchor Drug","Library Drug","ic50", "ic25")
}
}
}
library_drugs <- unique(drug_results[[h]]$Compound)
anchor_drugs <- unique(drug_results[[h]]$Anchor)
ic_results <- data.frame()
for(h in 1:length(drug_results)) {
#anch drugs needs to start at 2 to avoid "anchor doses = 0"
for (i in 2:length(anchor_drugs)) {
for(j in 1:length(library_drugs)) {
library_drugs <- unique(drug_results[[h]]$Compound)
anchor_drugs <- unique(drug_results[[h]]$Anchor)
#makes a subset for each unique anchor/lib pair
unique_pair_subset <- drug_results[[h]][ which(drug_results[[h]]$Compound == library_drugs[[j]] & drug_results[[h]]$Anchor == anchor_drugs[[i]])]
unique_pair_subset <- setorder(unique_pair_subset, Dose, AnchorDose)
compound_dose <- unique(unique_pair_subset$Dose)
anchor_dose <- unique(unique_pair_subset$AnchorDose)
#matrix for one anchor/lib pair with compound doses along the y, anchor doses on the x, as a funct of percent inhibition
inhibitionMatrix <- matrix(as.numeric(unique_pair_subset$inhibition), length(anchor_dose), length(compound_dose), byrow = F)
compound_dose <- append(compound_dose, 0)
compound_dose <- sort(compound_dose)
anchor_dose <- append(anchor_dose, 0)
anchor_dose <- sort(anchor_dose)
#add in a row to the matrix for the DMSO anchor dose
zero_dose_anchor <- drug_results[[h]][ which(drug_results[[h]]$Compound == library_drugs[[j]] & drug_results[[h]]$Anchor == "Anchor doses = 0")]
zero_dose_anchor <- zero_dose_anchor[order(Dose),]
inhibitionMatrix <- rbind(zero_dose_anchor$inhibition, inhibitionMatrix)
inhibitionMatrix <- cbind(0, inhibitionMatrix)
colnames(inhibitionMatrix) <- compound_dose
rownames(inhibitionMatrix) <- anchor_dose
#working calculates IC50 of lib compound only (anchor dose=0)
fit <- drFit(drMat = cbind(as.numeric(colnames(inhibitionMatrix)), 1-inhibitionMatrix[1, ]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
ic50 <- as.numeric(computeIC(fit, log.d = FALSE, interpolation = F))
ic25 <- as.numeric(computeIC(fit, percent = 0.25, log.d = FALSE, interpolation = F))
if(all(inhibitionMatrix[1, ]/100) > .5) ic50 = NA
if(all(inhibitionMatrix[1, ]/100) > .5) ic25 = NA
#print(ic50)
#original
#calculates IC50 of lib compound only (anchor dose=0)
# fit <- drFit(drMat = cbind(as.numeric(colnames(inhibitionMatrix)[c(1:7)]),1-inhibitionMatrix[1, c(1:7)]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
# ic50 <- as.numeric(computeIC(fit, log.d=FALSE, interpolation=F))
# if(all(1-inhibitionMatrix[1,c(1:7)]/100 > 0.5)) ic50 = NA
# print(ic50)
ic_results <- rbind(ic_results, c(anchor_drugs[[i]], library_drugs[[j]], ic50, ic25))
colnames(ic50_results) <- c("Anchor Drug","Library Drug","ic50", "ic25")
}
}
}
ic_results <- data.frame()
for(h in 1:length(drug_results)) {
#anch drugs needs to start at 2 to avoid "anchor doses = 0"
for (i in 2:length(anchor_drugs)) {
for(j in 1:length(library_drugs)) {
library_drugs <- unique(drug_results[[h]]$Compound)
anchor_drugs <- unique(drug_results[[h]]$Anchor)
#makes a subset for each unique anchor/lib pair
unique_pair_subset <- drug_results[[h]][ which(drug_results[[h]]$Compound == library_drugs[[j]] & drug_results[[h]]$Anchor == anchor_drugs[[i]])]
unique_pair_subset <- setorder(unique_pair_subset, Dose, AnchorDose)
compound_dose <- unique(unique_pair_subset$Dose)
anchor_dose <- unique(unique_pair_subset$AnchorDose)
#matrix for one anchor/lib pair with compound doses along the y, anchor doses on the x, as a funct of percent inhibition
inhibitionMatrix <- matrix(as.numeric(unique_pair_subset$inhibition), length(anchor_dose), length(compound_dose), byrow = F)
compound_dose <- append(compound_dose, 0)
compound_dose <- sort(compound_dose)
anchor_dose <- append(anchor_dose, 0)
anchor_dose <- sort(anchor_dose)
#add in a row to the matrix for the DMSO anchor dose
zero_dose_anchor <- drug_results[[h]][ which(drug_results[[h]]$Compound == library_drugs[[j]] & drug_results[[h]]$Anchor == "Anchor doses = 0")]
zero_dose_anchor <- zero_dose_anchor[order(Dose),]
inhibitionMatrix <- rbind(zero_dose_anchor$inhibition, inhibitionMatrix)
inhibitionMatrix <- cbind(0, inhibitionMatrix)
colnames(inhibitionMatrix) <- compound_dose
rownames(inhibitionMatrix) <- anchor_dose
#working calculates IC50 of lib compound only (anchor dose=0)
fit <- drFit(drMat = cbind(as.numeric(colnames(inhibitionMatrix)), 1-inhibitionMatrix[1, ]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
ic50 <- as.numeric(computeIC(fit, log.d = FALSE, interpolation = F))
ic25 <- as.numeric(computeIC(fit, percent = 0.25, log.d = FALSE, interpolation = F))
if(all(inhibitionMatrix[1, ]/100) > .5) ic50 = NA
if(all(inhibitionMatrix[1, ]/100) > .5) ic25 = NA
#print(ic50)
#original
#calculates IC50 of lib compound only (anchor dose=0)
# fit <- drFit(drMat = cbind(as.numeric(colnames(inhibitionMatrix)[c(1:7)]),1-inhibitionMatrix[1, c(1:7)]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
# ic50 <- as.numeric(computeIC(fit, log.d=FALSE, interpolation=F))
# if(all(1-inhibitionMatrix[1,c(1:7)]/100 > 0.5)) ic50 = NA
# print(ic50)
ic_results <- rbind(ic_results, c(anchor_drugs[[i]], library_drugs[[j]], ic50, ic25))
colnames(ic50_results) <- c("Anchor Drug","Library Drug","ic50", "ic25")
}
}
}
View(ic_results)
ic_results <- data.frame()
for(h in 1:length(drug_results)) {
#anch drugs needs to start at 2 to avoid "anchor doses = 0"
for (i in 2:length(anchor_drugs)) {
for(j in 1:length(library_drugs)) {
library_drugs <- unique(drug_results[[h]]$Compound)
anchor_drugs <- unique(drug_results[[h]]$Anchor)
#makes a subset for each unique anchor/lib pair
unique_pair_subset <- drug_results[[h]][ which(drug_results[[h]]$Compound == library_drugs[[j]] & drug_results[[h]]$Anchor == anchor_drugs[[i]])]
unique_pair_subset <- setorder(unique_pair_subset, Dose, AnchorDose)
compound_dose <- unique(unique_pair_subset$Dose)
anchor_dose <- unique(unique_pair_subset$AnchorDose)
#matrix for one anchor/lib pair with compound doses along the y, anchor doses on the x, as a funct of percent inhibition
inhibitionMatrix <- matrix(as.numeric(unique_pair_subset$inhibition), length(anchor_dose), length(compound_dose), byrow = F)
compound_dose <- append(compound_dose, 0)
compound_dose <- sort(compound_dose)
anchor_dose <- append(anchor_dose, 0)
anchor_dose <- sort(anchor_dose)
#add in a row to the matrix for the DMSO anchor dose
zero_dose_anchor <- drug_results[[h]][ which(drug_results[[h]]$Compound == library_drugs[[j]] & drug_results[[h]]$Anchor == "Anchor doses = 0")]
zero_dose_anchor <- zero_dose_anchor[order(Dose),]
inhibitionMatrix <- rbind(zero_dose_anchor$inhibition, inhibitionMatrix)
inhibitionMatrix <- cbind(0, inhibitionMatrix)
colnames(inhibitionMatrix) <- compound_dose
rownames(inhibitionMatrix) <- anchor_dose
#working calculates IC50 of lib compound only (anchor dose=0)
fit <- drFit(drMat = cbind(as.numeric(colnames(inhibitionMatrix)), 1-inhibitionMatrix[1, ]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
ic50 <- as.numeric(computeIC(fit, log.d = FALSE, interpolation = F))
ic25 <- as.numeric(computeIC(fit, percent = 0.25, log.d = FALSE, interpolation = F))
if(all(inhibitionMatrix[1, ]/100) > .5) ic50 = NA
if(all(inhibitionMatrix[1, ]/100) > .5) ic25 = NA
#print(ic50)
#original
#calculates IC50 of lib compound only (anchor dose=0)
# fit <- drFit(drMat = cbind(as.numeric(colnames(inhibitionMatrix)[c(1:7)]),1-inhibitionMatrix[1, c(1:7)]/100), modelName = "sigEmax", alpha=1, fitCtr=T)
# ic50 <- as.numeric(computeIC(fit, log.d=FALSE, interpolation=F))
# if(all(1-inhibitionMatrix[1,c(1:7)]/100 > 0.5)) ic50 = NA
# print(ic50)
ic_results <- rbind(ic_results, c(anchor_drugs[[i]], library_drugs[[j]], ic50, ic25))
#colnames(ic50_results) <- c("Anchor Drug","Library Drug","ic50", "ic25")
}
}
}
View(ic_results)
colnames(ic50_results) <- c("Anchor Drug","Library Drug","ic50", "ic25")
colnames(ic_results) <- c("Anchor Drug","Library Drug","ic50", "ic25")
#replace the Inf values to NA
ic_results <- replace.value(ic_results, c("ic50","ic25"), from = Inf, to= NA, verbose = FALSE)
ic_results <- as.numeric(ic_results)
#ic50Data is ic50 results with only numbers (removes Inf and NA)
ic50Data <- ic_results[!is.na(as.numeric(as.character(ic_results$ic50))),]
View(ic50Data)
#ic50Data is ic50 results with only numbers (removes Inf and NA)
ic50Data <- ic_results[!is.na(as.numeric(as.character(ic_results$ic50, ic_results$ic25))),]
rm(ic50Data)
#ic50Data is ic50 results with only numbers (removes Inf and NA)
ic50Data <- ic_results[!is.na(as.numeric(as.character(ic_results$ic50, ic_results$ic25))),]
rm(ic50Data)
#ic50Data is ic50 results with only numbers (removes Inf and NA)
ic50Data <- ic_results[!is.na(as.numeric(as.character(ic_results$ic50))),]
#ic50Data <- ic50Data[!grepl("Inf", ic50Data$ic50),]
ic50Data <- setorder(ic50Data, ic50)
View(ic50Data)
View(ic50Data)
#ic50Data <- ic50Data[!grepl("Inf", ic50Data$ic50),]
ic50Data <- setorder(ic50Data, ic50)
View(ic50Data)
head(ic50Data)
ic50Data <- as.numeric(ic50Data$ic50)
#total lib/anchor unique combinations for 15 files = 5280
# 2586
#histogram of all combined files and their calculatable IC50s (2586)
hist(ic50Data, freq = T, xlim = c(1e-9, 1.25e-5), breaks = 1000)
abline(v = median(ic50Data), col = "red", lwd = 2)
ic25Data <- ic_results[!is.na(as.numeric(as.character(ic_results$ic25))),]
#ic25Data <- ic25Data[!grepl("Inf", ic25Data$ic50),]
ic25Data <- setorder(ic25Data, ic25)
View(ic25Data)
View(ic25Data)
hist(ic25Data$ic25, freq = T, xlim = c(1e-9, 1.25e-5), breaks = 1000)
ic25Data <- as.numeric(ic25Data$ic25)
hist(ic25Data, freq = T, xlim = c(1e-9, 1.25e-5), breaks = 1000)
hist(ic25Data, freq = T, xlim = c(-1, 1.25e-5), breaks = 100)
hist(ic25Data, freq = T, xlim = c(-1e-9, 1.25e-5), breaks = 100)
hist(ic25Data, freq = T, xlim = c(-1e-9, 6e-6), breaks = 100)
hist(ic25Data, freq = T, xlim = c(-1e-9, 2e-6), breaks = 100)
hist(ic25Data, freq = T, xlim = c(-1e-9, 5e-7), breaks = 100)
class(ic25Data)
z %>%
flatten() %>%
keep(~all(. != 0))
ic50Data %>%
flatten() %>%
keep(~all(. != 0))
str(ic50Data)
ic25Data <- ic_results[!is.na(as.numeric(as.character(ic_results$ic25))),]
#ic25Data <- ic25Data[!grepl("Inf", ic25Data$ic50),]
ic25Data <- setorder(ic25Data, ic25)
View(ic25Data)
View(ic25Data)
ic25Data %>%
flatten() %>%
keep(~all(. != 0))
class(ic25Data)
row_sub = apply(ic25Data, 1, function(row) all(row !=0 ))
ic25Data <- ic25Data[row_sub,]
View(ic25Data)
ic25Data <- ic_results[!is.na(as.numeric(as.character(ic_results$ic25))),]
row_sub = apply(ic25Data$ic25, 1, function(row) all(row !=0 ))
row_sub = apply(ic25Data, 1, function(ic25) all(row !=0 ))
View(ic_results)
ic25Data <- ic_results[complete.cases(ic_results),]
View(ic25Data)
ic_results[ic_results == 0] <- NA
ic25Data <- ic_results[complete.cases(ic_results),]
#remove NA values
ic25Data <- ic_results$ic25[complete.cases(ic_results$ic25),]
ic25Data <- ic_results$ic25
ic25Data <- subset(ic_results$ic25)
ic25Data <- ic_results[ic25]
View(ic25Data)
View(ic25Data)
head(ic_results[ic25])
head(ic_results[[ic25]])
View(ic25Data)
#total lib/anchor unique combinations for 15 files = 5280
# 2586
#histogram of all combined files and their calculatable IC50s (2586)
hist(ic50Data, freq = T, xlim = c(1e-9, 1.25e-5), breaks = 1000)
ic50Data
CAFlines <- list(P140227T1
P140605N1
P170216T1
P170119T1
P170209N1(b))
CAFlines <- cat(gsub("(\\w+)", '"\\1"', CAFlines))
CAFlines <- list(P140227T1,
P140605N1,
P170216T1,
P170119T1,
P170209N1(b))
CAFlines <- cat(gsub("(\\w+)", '"\\1"', CAFlines))
CAFlines <- list("P140227T1", "P140605N1", "P170216T1", "P170119T1", "P170209N1(b)")
PDXlines <- list("P130411T1", "P100422-T1", "P190117T2OM", "P110616-T1", "P180129T1LV")
Basallines <- list("PancT6", "P110225-T1")
from random import choice
sample(CAFlines, 1)
sample(CAFlines, 1)
sample(CAFlines, 1)
sample(CAFlines, PDXlines)
set.seed(626)
sample(CAFlines, 1)
sample(CAFlines, 1)
Pairings <- matrix(CAFlines, sample(PDXlines))
Pairings <- matrix(CAFlines)
View(Pairings)
Pairings <- cbind(sample(PDXlines))
View(Pairings)
Pairings <- cbind(Pairings, sample(PDXlines))
View(Pairings)
Pairings <- matrix(CAFlines)
class(Pairings)
View(Pairings)
Pairings <- cbind(Pairings, sample(PDXlines))
View(Pairings)
dim(Pairings)
Pairings
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines))
Basalpairs
PDXpairs <- matrix(CAFlines)
PDXpairs <- cbind(PDXpairs, sample(PDXlines))
PDXpairs
set.seed(626)
PDXpairs <- matrix(CAFlines)
PDXpairs <- cbind(PDXpairs, sample(PDXlines))
PDXpairs
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = T))
Basalpairs
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = F))
Basalpairs
sample(PDXlines, 1)
sample(PDXlines, 1)
sample(PDXlines, 1)
sample(PDXlines, 1)
set.seed(626)
sample(PDXlines, 1)
sample(PDXlines, 1)
sample(PDXlines, 1)
sample(PDXlines, 1)
sample(PDXlines, 1)
sample(PDXlines, 1)
sample(PDXlines, 1)
sample(PDXlines, 1)
sample(PDXlines, 1)
sample(PDXlines, 1)
PDXpairs
PDXpairs
PDXpairs
PDXpairs <- matrix(CAFlines)
PDXpairs <- cbind(PDXpairs, sample(PDXlines))
PDXpairs
PDXpairs <- matrix(CAFlines)
PDXpairs <- cbind(PDXpairs, sample(PDXlines))
PDXpairs
PDXpairs <- matrix(CAFlines)
PDXpairs <- cbind(PDXpairs, sample(PDXlines))
PDXpairs
PDXpairs <- matrix(CAFlines)
PDXpairs <- cbind(PDXpairs, sample(PDXlines))
PDXpairs
PDXpairs <- matrix(CAFlines)
PDXpairs <- cbind(PDXpairs, sample(PDXlines))
PDXpairs
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = F))
Basalpairs
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = F))
Basalpairs
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = F))
Basalpairs
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = F))
Basalpairs
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = F))
Basalpairs
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = F))
Basalpairs
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = F))
Basalpairs
PDXpairs <- matrix(CAFlines)
PDXpairs <- cbind(PDXpairs, sample(PDXlines))
PDXpairs
set.seed(626)
PDXpairs <- matrix(CAFlines)
PDXpairs <- cbind(PDXpairs, sample(PDXlines))
PDXpairs
set.seed(626)
PDXpairs <- matrix(CAFlines)
PDXpairs <- cbind(PDXpairs, sample(PDXlines))
PDXpairs
set.seed(626)
PDXpairs <- matrix(CAFlines)
PDXpairs <- cbind(PDXpairs, sample(PDXlines))
PDXpairs
set.seed(626)
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = F))
Basalpairs
set.seed(626)
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = F))
Basalpairs
set.seed(626)
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = F))
Basalpairs
set.seed(626)
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = F))
Basalpairs
set.seed(626)
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = F))
Basalpairs
set.seed(626)
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = F))
Basalpairs
rand()
sample(1:1000, 2, replace=FALSE)
(1:1000, 2, replace=FALSE)
sample(1:1000, 2, replace=FALSE)
sample(1:1000, 2, replace=FALSE)
set.seed(279)
PDXpairs <- matrix(CAFlines)
PDXpairs <- cbind(PDXpairs, sample(PDXlines))
PDXpairs
set.seed(669)
Basalpairs <- matrix(CAFlines)
Basalpairs <- cbind(Basalpairs, sample(Basallines, replace = F))
Basalpairs
